<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.Collections;assembly=System.Private.CoreLib" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="BotBasePath" Type="InArgument(x:String)" />
    <x:Property Name="InputPath" Type="InArgument(x:String)" />
    <x:Property Name="MailSubject" Type="InArgument(x:String)" />
    <x:Property Name="OutPutPath" Type="InArgument(x:String)" />
    <x:Property Name="ProcessStringMain" Type="InArgument(x:String)" />
    <x:Property Name="PWD" Type="InArgument(x:String)" />
    <x:Property Name="MailCheck" Type="InOutArgument(x:Boolean)" />
    <x:Property Name="BotRunProcess" Type="InOutArgument(x:Boolean)" />
    <x:Property Name="UserName" Type="InArgument(x:String)" />
    <x:Property Name="FolderNamePath" Type="InArgument(x:String)" />
    <x:Property Name="InPutStorageFilePath" Type="InArgument(x:String)" />
    <x:Property Name="OutPutStorageFilePath" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>970,19014</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="92">
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Security</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.CSV</x:String>
      <x:String>UiPath.CSV.Activities</x:String>
      <x:String>UiPath.CV</x:String>
      <x:String>UiPath.CV.Activities</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>UiPath.Mail.SMTP.Activities</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>UiPath.PDF.Activities.PDF</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Shared.ObjectLibrary</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Numerics</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="80">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic.Core</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>UiPath.CV.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
      <x:Boolean x:Key="ShouldCollapseAll">False</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence DisplayName="ZohoSheet BOT" sap:VirtualizedContainerService.HintSize="970,18949" sap2010:WorkflowViewState.IdRef="Sequence_7">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="DataPath" />
      <Variable x:TypeArguments="x:String" Name="LogString_OUT" />
      <Variable x:TypeArguments="x:String" Name="LastSavedFileName" />
      <Variable x:TypeArguments="x:Int32" Name="Count" />
      <Variable x:TypeArguments="x:String" Name="LogString_IN" />
      <Variable x:TypeArguments="s:String[]" Name="CollectInputExcelFile" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounter" />
      <Variable x:TypeArguments="x:Int32" Name="PdfPageCounter" />
      <Variable x:TypeArguments="x:String" Name="CompanyCheck" />
      <Variable x:TypeArguments="x:Boolean" Name="FormatChecker" />
      <Variable x:TypeArguments="x:String" Name="NoFormat" />
      <Variable x:TypeArguments="x:String" Name="InputString" />
      <Variable x:TypeArguments="x:String" Name="textPdfFileName" />
      <Variable x:TypeArguments="x:String" Name="SourceFileName" />
      <Variable x:TypeArguments="s:String[]" Name="CompanyString" />
      <Variable x:TypeArguments="x:String" Name="String159" />
      <Variable x:TypeArguments="x:Int32" Name="PdfPageCount" />
      <Variable x:TypeArguments="x:Int32" Name="ProcessCounter" />
      <Variable x:TypeArguments="x:String" Name="CompanyStringMain" />
      <Variable x:TypeArguments="x:String" Name="CurrentFile" />
      <Variable x:TypeArguments="x:String" Name="DocumentSource" />
      <Variable x:TypeArguments="s:String[]" Name="item" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterADGLOBAL" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterAmazon" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterFIORA" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterMAX" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterMORE" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterMetro" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterSpencer" />
      <Variable x:TypeArguments="x:Int32" Name="ZohoExcelFileCounter" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterTrent" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="NoFormatFileCounterMain" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="NoFormatFileCounter" />
      <Variable x:TypeArguments="sc:ArrayList" Name="ProcessStringArrayList" />
      <Variable x:TypeArguments="s:String[]" Name="ProcessStringArray" />
      <Variable x:TypeArguments="x:String" Name="TempName" />
      <Variable x:TypeArguments="x:String" Name="FileName" />
      <Variable x:TypeArguments="x:String" Name="srtOutput" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Reco" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Returns_V" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Payment_T" />
      <Variable x:TypeArguments="x:Int32" Name="TotalPdfPages" />
      <Variable x:TypeArguments="x:Int32" Name="PdfPageCounterAvenueSupermartPayment" />
      <Variable x:TypeArguments="x:String" Name="DN_Process_Time" />
      <Variable x:TypeArguments="x:String" Name="PdfFileName" />
      <Variable x:TypeArguments="x:String" Name="DtString" />
      <Variable x:TypeArguments="x:Int32" Name="TotalPdfFiles" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Payment_V" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Invoice_T" />
      <Variable x:TypeArguments="x:String" Name="Amount" />
      <Variable x:TypeArguments="x:String" Name="UtrNo" />
      <Variable x:TypeArguments="s:Nullable(x:Int32)" Name="ColumnIndex2" />
      <Variable x:TypeArguments="x:String" Name="ColumnIndex1" />
      <Variable x:TypeArguments="x:Int32" Name="RowIndex1" />
      <Variable x:TypeArguments="sd:DataColumn" Name="ColumnABCD" />
      <Variable x:TypeArguments="x:String" Name="ColumnABCDE" />
      <Variable x:TypeArguments="x:Int32" Name="RowValue" />
      <Variable x:TypeArguments="x:Int32" Name="ColumnValue" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet1" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet2" />
      <Variable x:TypeArguments="x:Int32" Name="RowIndex2" />
      <Variable x:TypeArguments="x:Int32" Name="RowIndex3" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT2" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT3" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT4" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet3" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT5" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT6" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT7" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_UtrNo" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Invoice_V" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT111" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT12" />
      <Variable x:TypeArguments="x:Boolean" Name="StringBoolean1" />
      <Variable x:TypeArguments="x:Int32" Name="RowIndex4" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet4" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT8" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT13" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT9" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT10" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet5" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT31" />
      <Variable x:TypeArguments="sd:DataTable" Name="DtValue1" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DtValue2" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet6" />
      <Variable x:TypeArguments="x:Int32" Name="PdfFileCounterReliancePaymentAdvice" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet0" />
      <Variable x:TypeArguments="x:String" Name="InputExcelPath" />
      <Variable x:TypeArguments="x:String" Name="ExcelFileName" />
      <Variable x:TypeArguments="s:String[]" Name="CollectExcelFile" />
      <Variable x:TypeArguments="s:String[]" Name="CollectOutputExcelFile" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet7" />
      <Variable x:TypeArguments="x:Int32" Name="HighRowValue" />
      <Variable x:TypeArguments="x:String" Name="PdfFullName" />
      <Variable x:TypeArguments="x:Boolean" Name="EmailSequence" />
      <Variable x:TypeArguments="x:String" Name="ExcelDumpFileName" />
      <Variable x:TypeArguments="x:String" Name="ToUser" />
      <Variable x:TypeArguments="x:String" Name="Cc1User" />
      <Variable x:TypeArguments="x:String" Name="Bcc1User" />
      <Variable x:TypeArguments="x:String" Name="Cc2User" />
      <Variable x:TypeArguments="x:String" Name="CcExtraUser" />
      <Variable x:TypeArguments="x:Int32" Name="RowIndex5" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet9" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT14" />
      <Variable x:TypeArguments="s:String[]" Name="DataRowSet10" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT15" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT16" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT17" />
      <Variable x:TypeArguments="sd:DataTable" Name="DTT18" />
      <Variable x:TypeArguments="x:Boolean" Name="NullBoolean" />
      <Variable x:TypeArguments="s:Exception" Name="System160Error" />
      <Variable x:TypeArguments="x:TimeSpan" Name="DelayTime" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_OpTransaction" />
      <Variable x:TypeArguments="x:String" Name="DtUtrNoString" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT11" />
      <Variable x:TypeArguments="x:String" Name="String81" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT112" />
      <Variable x:TypeArguments="x:Int32" Name="ColumnValueReal" />
      <Variable x:TypeArguments="x:String" Name="Cc3User" />
      <Variable x:TypeArguments="x:String" Name="CcUser" />
      <Variable x:TypeArguments="x:String" Name="ExcelSheetName" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DTT113" />
      <Variable x:TypeArguments="x:String" Name="SenderName" />
      <Variable x:TypeArguments="s:String[]" Name="ExcelSheetNameArray" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="ExcelSheetNames" />
      <Variable x:TypeArguments="x:Int32" Name="Count2" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="ArrayExcel" />
      <Variable x:TypeArguments="x:Object" Name="Count3" />
      <Variable x:TypeArguments="s:String[]" Name="ArrayExcel1" />
      <Variable x:TypeArguments="x:Int32" Name="item2" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="x" />
      <Variable x:TypeArguments="x:String" Name="ProcessStringName" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="TypeNameList" />
      <Variable x:TypeArguments="s:String[]" Name="TypeNameArray" />
      <Variable x:TypeArguments="x:String" Name="OutputSheetName" />
      <Variable x:TypeArguments="x:String" Name="TypeNameString" />
      <Variable x:TypeArguments="x:String" Name="Difference" />
      <Variable x:TypeArguments="x:Int32" Name="Count4" />
      <Variable x:TypeArguments="x:String" Name="RecoExcelSheetName" />
      <Variable x:TypeArguments="x:String" Name="RecoWorkingString" />
      <Variable x:TypeArguments="x:String" Name="VendorName" />
      <Variable x:TypeArguments="x:String" Name="VendorCode" />
      <Variable x:TypeArguments="x:String" Name="CurrentExcelSheetName" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="OutputFileSheetName" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Invoice_T_Sum" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Payment_T_Sum" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_Returns_V_Sum" />
      <Variable x:TypeArguments="sd:DataTable" Name="DT_Zoho" />
      <Variable x:TypeArguments="sd:DataTable" Name="DT_OpTransaction_DR" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_OpTransaction_CR" />
      <Variable x:TypeArguments="x:String" Name="TextFilePath" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="OutPutTextFileValue" />
      <Variable x:TypeArguments="s:String[]" Name="MissMatchString" />
      <Variable x:TypeArguments="x:String" Name="CreditNotAccounted" />
      <Variable x:TypeArguments="x:String" Name="OutputTextValue" />
      <Variable x:TypeArguments="x:String" Name="TotalCrDrAmount" />
      <Variable x:TypeArguments="x:String" Name="NetDrAmount" />
      <Variable x:TypeArguments="x:String" Name="TDSadj" />
      <Variable x:TypeArguments="x:String" Name="RecoTdsAmt" />
      <Variable x:TypeArguments="sd:DataTable" Name="DT_ExtraSheet" />
      <Variable x:TypeArguments="sd:DataTable" Default="[new System.data.DataTable]" Name="DT_TDS" />
      <Variable x:TypeArguments="x:String" Name="RecoC5Value" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="Sequence for ZohoSheet BOT-1" sap:VirtualizedContainerService.HintSize="908,18280" sap2010:WorkflowViewState.IdRef="Sequence_10">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence DisplayName="2-Sequence" sap:VirtualizedContainerService.HintSize="846,1988" sap2010:WorkflowViewState.IdRef="Sequence_302">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:CommentOut sap2010:Annotation.AnnotationText="Drag out this Old-1 from Comment Out to run Manul Working &amp; get the output excel file for the Input excel input file." DisplayName="Comment Out Sequence (Manul Working)" sap:VirtualizedContainerService.HintSize="541,149" sap2010:WorkflowViewState.IdRef="CommentOut_174">
          <ui:CommentOut.Body>
            <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,100" sap2010:WorkflowViewState.IdRef="Sequence_571">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Sequence>
          </ui:CommentOut.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:CommentOut>
        <Sequence sap2010:Annotation.AnnotationText="It should be disabled after using NEW 1- Do not use this after completing process, reading from e- mail" DisplayName="Old-1- Sequence (Manul Working)" sap:VirtualizedContainerService.HintSize="541,1636" sap2010:WorkflowViewState.IdRef="Sequence_346">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:Comment sap:VirtualizedContainerService.HintSize="479,134" sap2010:WorkflowViewState.IdRef="Comment_1" Text="// Old-1-It should be disabled after using NEW 1- Do not use this after completing process, reading from e- mail" />
          <Assign sap2010:Annotation.AnnotationText="helpssinfo@gmail.com" sap:VirtualizedContainerService.HintSize="479,153" sap2010:WorkflowViewState.IdRef="Assign_71">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[PWD]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">zajxvnohpqaokbhc</InArgument>
            </Assign.Value>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Assign>
          <ui:GetEnvironmentFolder DisplayName="Old- Get Environment Folder" FolderPath="[DataPath]" sap:VirtualizedContainerService.HintSize="479,125" sap2010:WorkflowViewState.IdRef="GetEnvironmentFolder_1" SpecialFolder="Desktop" />
          <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="479,92" sap2010:WorkflowViewState.IdRef="CommentOut_253">
            <ui:CommentOut.Body>
              <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="541,596" sap2010:WorkflowViewState.IdRef="Sequence_787">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:MultipleAssign DisplayName="Old- Multiple Assign" sap:VirtualizedContainerService.HintSize="479,511" sap2010:WorkflowViewState.IdRef="MultipleAssign_16">
                  <ui:MultipleAssign.AssignOperations>
                    <scg:List x:TypeArguments="ui:AssignOperation" Capacity="16">
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_104">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[ProcessStringMain]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">Agency</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_105">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[BotBasePath]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[DataPath+"\BOT Data\Agency\"]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_106">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[InputPath]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[BotBasePath + "InputExcelFiles\"]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_107">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[OutPutPath]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[BotBasePath + "OutPutFiles\"]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_108">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[DocumentSource]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[BotBasePath &amp; "\"]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_109">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="s:String[]">[CollectInputExcelFile]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="s:String[]">[Directory.GetFiles(InputPath &amp; ProcessStringMain &amp; "\")]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_110">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:Int32">[ZohoExcelFileCounter]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:Int32">[CollectInputExcelFile.Length]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_111">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[DN_Process_Time]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[now.ToString("ddMMyy hmmss tt")]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_112">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:Int32">[TotalPdfFiles]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:Int32">[TotalPdfFiles + ZohoExcelFileCounter]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_113">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[CompanyStringMain]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[ProcessStringMain]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_114">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[InputExcelPath]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[BotBasePath + "InputExcelDumpFiles\" + ProcessStringMain + "\"]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_115">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="s:String[]">[CollectExcelFile]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="s:String[]">[Directory.GetFiles(InputExcelPath)]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_116">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="s:String[]">[CollectOutputExcelFile]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="s:String[]">[Directory.GetFiles(OutPutPath)]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                    </scg:List>
                  </ui:MultipleAssign.AssignOperations>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:MultipleAssign>
              </Sequence>
            </ui:CommentOut.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:CommentOut>
          <ui:MultipleAssign DisplayName="Zoho - Multiple Assign" sap:VirtualizedContainerService.HintSize="479,497" sap2010:WorkflowViewState.IdRef="MultipleAssign_3">
            <ui:MultipleAssign.AssignOperations>
              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="16">
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_51">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[ProcessStringMain]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">["ZohoSheet"]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_33">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[BotBasePath]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[DataPath+"\BOT Data\" +ProcessStringMain +"\"]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_118">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[InputPath]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[BotBasePath + "InputExcelFiles\"]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_36">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[DocumentSource]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[BotBasePath &amp; "\"]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_37">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="s:String[]">[CollectInputExcelFile]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="s:String[]">[Directory.GetFiles(InputPath &amp; ProcessStringMain &amp; "\")]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_117">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[OutPutPath]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[BotBasePath + "OutPutFiles\"]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_38">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:Int32">[ZohoExcelFileCounter]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:Int32">[CollectInputExcelFile.Length]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_39">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[DN_Process_Time]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[now.ToString("ddMMyy hmmss tt")]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_40">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:Int32">[TotalPdfFiles]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:Int32">[TotalPdfFiles + ZohoExcelFileCounter]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_41">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[CompanyStringMain]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[ProcessStringMain]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_42">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[InputExcelPath]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[BotBasePath + "InputExcelDumpFiles\" + ProcessStringMain + "\"]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_128">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[TextFilePath]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">[BotBasePath + "ZohoTextFile\" + ProcessStringMain + "\"]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
              </scg:List>
            </ui:MultipleAssign.AssignOperations>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:MultipleAssign>
          <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="479,92" sap2010:WorkflowViewState.IdRef="CommentOut_263">
            <ui:CommentOut.Body>
              <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="512,907" sap2010:WorkflowViewState.IdRef="Sequence_809">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap:VirtualizedContainerService.HintSize="450,122" sap2010:WorkflowViewState.IdRef="Assign_295">
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:String[]">[CollectInputExcelFile]</OutArgument>
                  </Assign.To>
                </Assign>
                <ui:CommentOut DisplayName="Comment Out Do Not Use Sent User Description " sap:VirtualizedContainerService.HintSize="450,92" sap2010:WorkflowViewState.IdRef="CommentOut_132">
                  <ui:CommentOut.Body>
                    <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="493,367" sap2010:WorkflowViewState.IdRef="Sequence_455">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:MultipleAssign DisplayName="Multiple Assign Main Sent User Description " sap:VirtualizedContainerService.HintSize="431,256" sap2010:WorkflowViewState.IdRef="MultipleAssign_7">
                        <ui:MultipleAssign.AssignOperations>
                          <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_66">
                              <ui:AssignOperation.To>
                                <OutArgument x:TypeArguments="x:String">[UserName]</OutArgument>
                              </ui:AssignOperation.To>
                              <ui:AssignOperation.Value>
                                <InArgument x:TypeArguments="x:String">alokma417@gmail.com</InArgument>
                              </ui:AssignOperation.Value>
                            </ui:AssignOperation>
                            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_61">
                              <ui:AssignOperation.To>
                                <OutArgument x:TypeArguments="x:String">[ToUser]</OutArgument>
                              </ui:AssignOperation.To>
                              <ui:AssignOperation.Value>
                                <InArgument x:TypeArguments="x:String">dilip.kumara@tataconsumer.com</InArgument>
                              </ui:AssignOperation.Value>
                            </ui:AssignOperation>
                            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_62">
                              <ui:AssignOperation.To>
                                <OutArgument x:TypeArguments="x:String">[Cc1User]</OutArgument>
                              </ui:AssignOperation.To>
                              <ui:AssignOperation.Value>
                                <InArgument x:TypeArguments="x:String">Keerthan.Shetty@tataconsumer.com</InArgument>
                              </ui:AssignOperation.Value>
                            </ui:AssignOperation>
                            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_63">
                              <ui:AssignOperation.To>
                                <OutArgument x:TypeArguments="x:String">[Cc2User]</OutArgument>
                              </ui:AssignOperation.To>
                              <ui:AssignOperation.Value>
                                <InArgument x:TypeArguments="x:String">vijay@infomapglobal.com</InArgument>
                              </ui:AssignOperation.Value>
                            </ui:AssignOperation>
                            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_64">
                              <ui:AssignOperation.To>
                                <OutArgument x:TypeArguments="x:String">[CcExtraUser]</OutArgument>
                              </ui:AssignOperation.To>
                              <ui:AssignOperation.Value>
                                <InArgument x:TypeArguments="x:String">MT.SA@tataconsumer.com</InArgument>
                              </ui:AssignOperation.Value>
                            </ui:AssignOperation>
                            <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_65">
                              <ui:AssignOperation.To>
                                <OutArgument x:TypeArguments="x:String">[Bcc1User]</OutArgument>
                              </ui:AssignOperation.To>
                              <ui:AssignOperation.Value>
                                <InArgument x:TypeArguments="x:String">alokm41712@gmail.com</InArgument>
                              </ui:AssignOperation.Value>
                            </ui:AssignOperation>
                          </scg:List>
                        </ui:MultipleAssign.AssignOperations>
                      </ui:MultipleAssign>
                    </Sequence>
                  </ui:CommentOut.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:CommentOut>
                <Assign sap:VirtualizedContainerService.HintSize="450,122" sap2010:WorkflowViewState.IdRef="Assign_115">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[UserName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">alokma417@gmail.com</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign DisplayName="Assign -After completing hide this segment" sap:VirtualizedContainerService.HintSize="450,122" sap2010:WorkflowViewState.IdRef="Assign_116">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[ToUser]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">alokm41712@gmail.com</InArgument>
                  </Assign.Value>
                </Assign>
                <Sequence DisplayName="Sequence-Locally Assigned InPutStorageFilePath &amp; OutPutStorageFilePath" sap:VirtualizedContainerService.HintSize="450,121" sap2010:WorkflowViewState.IdRef="Sequence_451">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:MultipleAssign DisplayName="Locally Assigned- Multiple Assign InPutStorageFilePath &amp; OutPutStorageFilePath" sap:VirtualizedContainerService.HintSize="431,132" sap2010:WorkflowViewState.IdRef="MultipleAssign_10">
                    <ui:MultipleAssign.AssignOperations>
                      <scg:List x:TypeArguments="ui:AssignOperation" Capacity="16">
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_77">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[InPutStorageFilePath]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String" xml:space="preserve">[BotBasePath + "PaymentAdvice InputOutput Files\" + ProcessStringMain + "\" + "InputFiles\" +  ProcessStringMain + "-" + DN_Process_Time + "\"]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_78">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[OutPutStorageFilePath]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String" xml:space="preserve">[BotBasePath + "PaymentAdvice InputOutput Files\" + ProcessStringMain + "\" + "OutPutFiles\" +  ProcessStringMain + "-" + DN_Process_Time + "\"]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                      </scg:List>
                    </ui:MultipleAssign.AssignOperations>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:MultipleAssign>
                  <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="431,80" sap2010:WorkflowViewState.IdRef="CreateDirectory_1" Path="[InPutStorageFilePath]" />
                  <ui:CreateDirectory ContinueOnError="{x:Null}" Output="{x:Null}" DisplayName="Create Folder" sap:VirtualizedContainerService.HintSize="431,80" sap2010:WorkflowViewState.IdRef="CreateDirectory_2" Path="[OutPutStorageFilePath]" />
                </Sequence>
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="450,130" sap2010:WorkflowViewState.IdRef="WriteLine_63" Text="[&quot;1-InputPath=&quot; &amp; InputPath]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="450,113" sap2010:WorkflowViewState.IdRef="WriteLine_65" Text="[&quot;3-AmazonPaymentExcelFileCounter (Excel File Counter)=&quot; &amp; ZohoExcelFileCounter &amp; &quot;=&quot; &amp; ZohoExcelFileCounter]" />
              </Sequence>
            </ui:CommentOut.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:CommentOut>
          <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="479,130" sap2010:WorkflowViewState.IdRef="WriteLine_64" Text="[&quot;2-OutPutPath=&quot; &amp; OutPutPath]" />
          <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="479,130" sap2010:WorkflowViewState.IdRef="WriteLine_66" Text="[&quot;4-InputExcelPath=&quot; &amp; InputExcelPath]" />
          <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="479,113" sap2010:WorkflowViewState.IdRef="WriteLine_424" Text="[&quot;5-ZohoExcelFileCounter=&quot; &amp; ZohoExcelFileCounter.ToString()]" />
        </Sequence>
        <ui:CommentOut DisplayName="Comment Out From Mtec Email Account" sap:VirtualizedContainerService.HintSize="541,75" sap2010:WorkflowViewState.IdRef="CommentOut_100">
          <ui:CommentOut.Body>
            <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="512,323" sap2010:WorkflowViewState.IdRef="Sequence_347">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Sequence sap2010:Annotation.AnnotationText="Working Sequence - NEW 1 - Use this after completing process, reading from e- mail" DisplayName="Sequence New" sap:VirtualizedContainerService.HintSize="450,163" sap2010:WorkflowViewState.IdRef="Sequence_345">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:Comment sap:VirtualizedContainerService.HintSize="431,75" sap2010:WorkflowViewState.IdRef="Comment_2" Text="// Comment Out - NEW 1- Use this after completing process, reading from e- mail" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_78" Text="[&quot;11.00-&quot; &amp; ProcessStringMain &amp; &quot;  BOT Process for &quot; &amp; ProcessStringMain]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_67" Text="[&quot;11.01-InputPath details at &quot; &amp; ProcessStringMain &amp; &quot; BOT Process=&quot; &amp; InputPath]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_68" Text="[&quot;11.02-OutPutPath=&quot; &amp; OutPutPath]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_69" Text="[&quot;11.03-HotExcelFileCounter (Excel File Counter)=&quot; &amp; ZohoExcelFileCounter]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_70" Text="[&quot;11.04-InputExcelPath=&quot; &amp; InputExcelPath]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_55" Text="[&quot;11.05-MailSubject details at AvenuePayment BOT Process=&quot; &amp; MailSubject]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_57" Text="[&quot;11.06-BotBasePath details at HotPayment BOT Process=&quot; &amp; BotBasePath]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_58" Text="[&quot;11.07-OutPutPath details at ReliancePayment BOT Process=&quot; &amp; OutPutPath]" />
                <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="431,256" sap2010:WorkflowViewState.IdRef="MultipleAssign_4">
                  <ui:MultipleAssign.AssignOperations>
                    <scg:List x:TypeArguments="ui:AssignOperation" Capacity="16">
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_45">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[DocumentSource]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[InputPath &amp; ProcessStringMain &amp; "\"]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_46">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="s:String[]">[CollectInputExcelFile]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="s:String[]">[Directory.GetFiles(DocumentSource)]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_47">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:Int32">[ZohoExcelFileCounter]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:Int32">[CollectInputExcelFile.Length]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_48">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[DN_Process_Time]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[now.ToString("ddMMyy hmmss tt")]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_49">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:Int32">[TotalPdfFiles]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:Int32">[TotalPdfFiles + ZohoExcelFileCounter]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_50">
                        <ui:AssignOperation.To>
                          <OutArgument x:TypeArguments="x:String">[CompanyStringMain]</OutArgument>
                        </ui:AssignOperation.To>
                        <ui:AssignOperation.Value>
                          <InArgument x:TypeArguments="x:String">[ProcessStringMain]</InArgument>
                        </ui:AssignOperation.Value>
                      </ui:AssignOperation>
                    </scg:List>
                  </ui:MultipleAssign.AssignOperations>
                </ui:MultipleAssign>
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="431,62" sap2010:WorkflowViewState.IdRef="WriteLine_59" Text="[&quot;11.08-Excel FileCounter (No. of Excel Files in HotPayment Input Folder )=&quot; &amp; TotalPdfFiles]" />
              </Sequence>
              <ui:CommentOut DisplayName="Comment Out Main Sent User Description " sap:VirtualizedContainerService.HintSize="450,75" sap2010:WorkflowViewState.IdRef="CommentOut_133">
                <ui:CommentOut.Body>
                  <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="493,194" sap2010:WorkflowViewState.IdRef="Sequence_456">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:MultipleAssign sap2010:Annotation.AnnotationText="There are 3 SMTP Mail Messages." DisplayName="Multiple Assign Main Sent User Description " sap:VirtualizedContainerService.HintSize="388,83" sap2010:WorkflowViewState.IdRef="MultipleAssign_13">
                      <ui:MultipleAssign.AssignOperations>
                        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_88">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[ToUser]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">dilip.kumara@tataconsumer.com</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_89">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[Cc1User]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">Karthik.Kunder@tataconsumer.com</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_90">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[Cc2User]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">Rabindra.Sahu@tataconsumer.com</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_102">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[Cc3User]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">vijay@infomapglobal.com</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_91">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[CcExtraUser]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">mt.sa@tataconsumer.com</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_97">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[CcUser]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">[Cc1User + ";" + Cc2User + ";" + Cc3User + ";" + CcExtraUser]</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_98">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[Bcc1User]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">alokm41712@gmail.com</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_103">
                            <ui:AssignOperation.To>
                              <OutArgument x:TypeArguments="x:String">[SenderName]</OutArgument>
                            </ui:AssignOperation.To>
                            <ui:AssignOperation.Value>
                              <InArgument x:TypeArguments="x:String">Mtec Support</InArgument>
                            </ui:AssignOperation.Value>
                          </ui:AssignOperation>
                        </scg:List>
                      </ui:MultipleAssign.AssignOperations>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">True</x:Boolean>
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:MultipleAssign>
                  </Sequence>
                </ui:CommentOut.Body>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:CommentOut>
            </Sequence>
          </ui:CommentOut.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:CommentOut>
      </Sequence>
      <Assign DisplayName="Assign ColumnValue = 1" sap:VirtualizedContainerService.HintSize="846,122" sap2010:WorkflowViewState.IdRef="Assign_133">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[ColumnValue]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">1</InArgument>
        </Assign.Value>
      </Assign>
      <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="846,15482" sap2010:WorkflowViewState.IdRef="ForEach`1_46" Values="[CollectInputExcelFile]">
        <ui:ForEach.Body>
          <ActivityAction x:TypeArguments="x:String">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="x:String" Name="CurrentFile1" />
            </ActivityAction.Argument>
            <Sequence DisplayName="8-Body" sap:VirtualizedContainerService.HintSize="812,15278" sap2010:WorkflowViewState.IdRef="Sequence_610">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="750,130" sap2010:WorkflowViewState.IdRef="WriteLine_211" Text="[&quot;11.16-&quot; + CurrentFile1.ToString()]" />
              <Sequence DisplayName="Sequence - Build DataTable " sap:VirtualizedContainerService.HintSize="750,121" sap2010:WorkflowViewState.IdRef="Sequence_845">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:BuildDataTable sap2010:Annotation.AnnotationText="Working - DTT8" DataTable="[DTT8]" DisplayName="Build DataTable For Excel File &amp; DataRowSet1" sap:VirtualizedContainerService.HintSize="388,131" sap2010:WorkflowViewState.IdRef="BuildDataTable_47" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;Less_x002F_Add_x0020_Values&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;10000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Bank_x0020_entry_x0020__x002F__x0020_DR_x0020__x002F__x0020_CR_x0020__x002F__x0020_TDS_x0020__x002F__x0020_TDS_x0020_Adj._x0020_Values&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;1000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Amount_x0020__x0028_INR_x0029_&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;10000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:BuildDataTable>
                <ui:BuildDataTable sap2010:Annotation.AnnotationText="Working - DTT9" DataTable="[DTT9]" DisplayName="Build DataTable For Excel File &amp; DataRowSet2" sap:VirtualizedContainerService.HintSize="388,131" sap2010:WorkflowViewState.IdRef="BuildDataTable_48" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;No.&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;10000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Reference_number&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;10000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Value_x0020_Date&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;10000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Txn_x0020_Posted_x0020_Date&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;10000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Transaction_x0020_Amount_x0020__x0028_INR_x0029_&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;1000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:BuildDataTable>
                <ui:BuildDataTable sap2010:Annotation.AnnotationText="Working - DTT10" DataTable="[DTT10]" DisplayName="Build DataTable For Excel File &amp; DataRowSet3" sap:VirtualizedContainerService.HintSize="388,131" sap2010:WorkflowViewState.IdRef="BuildDataTable_50" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;Transaction_x0020_Amount_x0020__x0028_INR_x0029_&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;1000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:BuildDataTable>
                <ui:BuildDataTable sap2010:Annotation.AnnotationText="Working - DTT11" DataTable="[DTT11]" DisplayName="Build DataTable For Excel File &amp; DataRowSet4" sap:VirtualizedContainerService.HintSize="388,131" sap2010:WorkflowViewState.IdRef="BuildDataTable_51" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;Document_x0020_Type&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Amount_x0020_Rs.&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:BuildDataTable>
                <ui:BuildDataTable sap2010:Annotation.AnnotationText="Working - DTT16" DataTable="[DTT16]" DisplayName="Build DataTable For Excel File &amp; DataRowSet10" sap:VirtualizedContainerService.HintSize="388,131" sap2010:WorkflowViewState.IdRef="BuildDataTable_52" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;TDS_x0020_Amount_x0020__x0028_INR_x0029_&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;1000000&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:BuildDataTable>
                <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="388,75" sap2010:WorkflowViewState.IdRef="CommentOut_336">
                  <ui:CommentOut.Body>
                    <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,199" sap2010:WorkflowViewState.IdRef="Sequence_1097">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:BuildDataTable sap2010:Annotation.AnnotationText="Working - DT_Returns_V_Sum" DataTable="[DT_Returns_V_Sum]" DisplayName="Build DataTable For Excel File &amp; DataRowSet9" sap:VirtualizedContainerService.HintSize="354,114" sap2010:WorkflowViewState.IdRef="BuildDataTable_53" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;V_Returns_Name&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;V_Returns_Matched_Amt_Sum&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;V_Returns_Diff_Sum&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:BuildDataTable>
                    </Sequence>
                  </ui:CommentOut.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:CommentOut>
              </Sequence>
              <Sequence DisplayName="9-Sequence" sap:VirtualizedContainerService.HintSize="750,14942" sap2010:WorkflowViewState.IdRef="Sequence_737">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap2010:Annotation.AnnotationText="ExcelFileName is used in all process for the input file name with Extension." sap:VirtualizedContainerService.HintSize="688,153" sap2010:WorkflowViewState.IdRef="Assign_218">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[ExcelFileName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[Path.GetFileName(CurrentFile1.ToString())]</InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <Assign sap2010:Annotation.AnnotationText="PdfFileName is used in all process for the input file name without Extension.&#xA;Here PdfFileName is a the name of the input excel file name without Extension" sap:VirtualizedContainerService.HintSize="688,194" sap2010:WorkflowViewState.IdRef="Assign_219">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[PdfFileName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[Path.GetFileNameWithoutExtension(CurrentFile1.ToString())]</InArgument>
                  </Assign.Value>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Assign>
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="688,130" sap2010:WorkflowViewState.IdRef="WriteLine_212" Text="[&quot;11.17-&quot; +&quot;Input Excel File Name with extention =&quot; + ExcelFileName]" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="688,130" sap2010:WorkflowViewState.IdRef="WriteLine_213" Text="[&quot;11.18-&quot; +&quot;Input Excel File Name without extention =&quot; + PdfFileName]" />
                <Assign sap:VirtualizedContainerService.HintSize="688,122" sap2010:WorkflowViewState.IdRef="Assign_239">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[LastSavedFileName]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String" xml:space="preserve">["Test_"  + DN_Process_Time  +".xlsx"]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap:VirtualizedContainerService.HintSize="688,122" sap2010:WorkflowViewState.IdRef="Assign_241">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[Count]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">0</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:ExcelApplicationScope Password="{x:Null}" sap2010:Annotation.AnnotationText="10-Private: Excel Application Scope - To get Excel Sheet Name" DisplayName="Private: 10-Excel Application Scope - To get Excel Sheet Name" sap:VirtualizedContainerService.HintSize="688,519" sap2010:WorkflowViewState.IdRef="ExcelApplicationScope_9" InstanceCachePeriod="3000" WorkbookPath="[CurrentFile1.ToString()]">
                  <ui:ExcelApplicationScope.Body>
                    <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="ui:WorkbookApplication" Name="ExcelWorkbookScope" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="416,338" sap2010:WorkflowViewState.IdRef="Sequence_817">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:ExcelGetWorkbookSheets DisplayName="Get Workbook Sheets" sap:VirtualizedContainerService.HintSize="354,65" sap2010:WorkflowViewState.IdRef="ExcelGetWorkbookSheets_2" Sheets="[ArrayExcel]" />
                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9;Dim String0 As String&#xA;&#x9;Dim String1 As String&#xA;&#x9;Dim String2 As String&#xA;&#x9;Dim TempString1() As String&#xA;&#x9;Dim TempString2() As String&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;For Each x In ArrayExcel &#xA;&#x9;&#x9;Console.WriteLine(&quot;LN-11-Sheet Name-&quot; + x)&#xA;&#x9;&#x9;'TempString1 = x&#xA;&#x9;Next x&#xA;&#x9;&#xA;&#x9;Catch ex As Exception&#xA;&#x9;&#x9;&#x9;Console.WriteLine(&quot;Error    &quot;+ ex.ToString())&#xA;End Try&#xA;&#x9;&#xA;&#x9;                " DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="354,188" sap2010:WorkflowViewState.IdRef="InvokeCode_155">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="scg:List(x:String)" x:Key="ArrayExcel">[ArrayExcel]</InArgument>
                          </ui:InvokeCode.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeCode>
                      </Sequence>
                    </ActivityAction>
                  </ui:ExcelApplicationScope.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ExcelApplicationScope>
                <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each-Working-2" sap:VirtualizedContainerService.HintSize="688,2570" sap2010:WorkflowViewState.IdRef="ForEach`1_53" Values="[ArrayExcel]">
                  <ui:ForEach.Body>
                    <ActivityAction x:TypeArguments="x:String">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                      </ActivityAction.Argument>
                      <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="654,2366" sap2010:WorkflowViewState.IdRef="Sequence_1025">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If Condition="[(item.ToString() = &quot;OpTransactionHistoryUX3&quot;) = True]" DisplayName="If (For Sheet Name-OpTransactionHistoryUX3)" sap:VirtualizedContainerService.HintSize="592,1141" sap2010:WorkflowViewState.IdRef="If_122">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="496,765" sap2010:WorkflowViewState.IdRef="Sequence_999">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:Boolean" Name="DeleteCondition" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <ui:ReadRange Range="{x:Null}" AddHeaders="False" DataTable="[DT_OpTransaction]" DisplayName="Read Range (Read Input Excel File with ExcelSheetName of Input file)" sap:VirtualizedContainerService.HintSize="434,128" sap2010:WorkflowViewState.IdRef="ReadRange_22" SheetName="[item.ToString()]" WorkbookPath="[CurrentFile1.ToString()]" />
                              <ui:WriteRange StartingCell="{x:Null}" AddHeaders="False" sap2010:Annotation.AnnotationText="" DataTable="[DT_OpTransaction]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="434,187" sap2010:WorkflowViewState.IdRef="WriteRange_60" SheetName="[item.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:WriteRange>
                              <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_296">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[CurrentExcelSheetName]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[item.ToString()]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="434,130" sap2010:WorkflowViewState.IdRef="WriteLine_426" Text="[&quot;11.19-&quot; + &quot;Selecting sheet name-&quot; + item.ToString() +&#xA;&quot; for Input Excel File Name with extention =&quot; + ExcelFileName]" />
                              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="434,113" sap2010:WorkflowViewState.IdRef="WriteLine_427" Text="[&quot;ArrayExcel.Count=&quot; + ArrayExcel.Count.ToString()]" />
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,198" sap2010:WorkflowViewState.IdRef="Sequence_1015">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="354,113" sap2010:WorkflowViewState.IdRef="WriteLine_451" Text="[&quot;11.20-&quot; +&quot; There is no &quot; + item.ToString() +&quot; sheet name in the Input excel file ( &quot; + ExcelFileName + &quot; ).&quot;]" />
                            </Sequence>
                          </If.Else>
                        </If>
                        <If Condition="[(item.ToString() = &quot;Zoho&quot;) = True]" DisplayName="If (For Sheet Name-Zoho)" sap:VirtualizedContainerService.HintSize="592,1140" sap2010:WorkflowViewState.IdRef="If_126">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="558,781" sap2010:WorkflowViewState.IdRef="Sequence_1027">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:Boolean" Name="DeleteCondition" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Sequence sap:VirtualizedContainerService.HintSize="496,696" sap2010:WorkflowViewState.IdRef="Sequence_1039">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:ReadRange Range="{x:Null}" AddHeaders="False" DataTable="[DT_Zoho]" DisplayName="Read Range (Read Input Excel File with ExcelSheetName of Input file)" sap:VirtualizedContainerService.HintSize="434,128" sap2010:WorkflowViewState.IdRef="ReadRange_24" SheetName="[item.ToString()]" WorkbookPath="[CurrentFile1.ToString()]" />
                                <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="CommentOut_333">
                                  <ui:CommentOut.Body>
                                    <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,255" sap2010:WorkflowViewState.IdRef="Sequence_1068">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:WriteRange StartingCell="{x:Null}" AddHeaders="False" sap2010:Annotation.AnnotationText="" DataTable="[DT_Zoho]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="354,170" sap2010:WorkflowViewState.IdRef="WriteRange_72" SheetName="[item.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                      </ui:WriteRange>
                                    </Sequence>
                                  </ui:CommentOut.Body>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:CommentOut>
                                <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_320">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">[CurrentExcelSheetName]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">[item.ToString()]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="434,130" sap2010:WorkflowViewState.IdRef="WriteLine_445" Text="[&quot;11.21-&quot; + &quot;Selecting sheet name-&quot; + item.ToString() +&#xA;&quot; for Input Excel File Name with extention =&quot; + ExcelFileName]" />
                                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="434,113" sap2010:WorkflowViewState.IdRef="WriteLine_446" Text="[&quot;ArrayExcel.Count=&quot; + ArrayExcel.Count.ToString()]" />
                              </Sequence>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,198" sap2010:WorkflowViewState.IdRef="Sequence_1038">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="354,113" sap2010:WorkflowViewState.IdRef="WriteLine_450" Text="[&quot;11.22-&quot; +&quot; There is no &quot; + item.ToString() +&quot; sheet name in the Input excel file ( &quot; + ExcelFileName + &quot; ).&quot;]" />
                            </Sequence>
                          </If.Else>
                        </If>
                      </Sequence>
                    </ActivityAction>
                  </ui:ForEach.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:ForEach>
                <Sequence sap:VirtualizedContainerService.HintSize="688,402" sap2010:WorkflowViewState.IdRef="Sequence_1040">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <WriteLine sap2010:Annotation.AnnotationText="For Sheet Name-OpTransactionHistoryUX3" DisplayName="Write Line " sap:VirtualizedContainerService.HintSize="388,161" sap2010:WorkflowViewState.IdRef="WriteLine_452" Text="[&quot;11.20-&quot; +&quot; DT_OpTransaction.Rows.Count &quot; &amp; &quot;=&quot; &amp;  DT_OpTransaction.Rows.Count.ToString() +&#xA;Environment.NewLine + &#xA;&quot; DT_OpTransaction.Columns.Count &quot; &amp; &quot;=&quot; &amp;  DT_OpTransaction.Columns.Count.ToString()]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </WriteLine>
                  <WriteLine DisplayName="Write Line (For Sheet Name-Zoho)" sap:VirtualizedContainerService.HintSize="388,113" sap2010:WorkflowViewState.IdRef="WriteLine_453" Text="[&quot;11.21-&quot; +&quot; DT_Zoho.Rows.Count &quot; &amp; &quot;=&quot; &amp;  DT_Zoho.Rows.Count.ToString() + Environment.NewLine + &#xA;&quot; DT_Zoho.Columns.Count &quot; &amp; &quot;=&quot; &amp;  DT_Zoho.Columns.Count.ToString()]" />
                </Sequence>
                <Sequence DisplayName="Sequence - For CR Value" sap:VirtualizedContainerService.HintSize="688,876" sap2010:WorkflowViewState.IdRef="Sequence_1043">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:FilterDataTable sap2010:Annotation.AnnotationText="Filter Data Table (CR &amp; DR Value from Cr/Dr Column  Value_For CR Value)" DataTable="[DT_OpTransaction]" DisplayName="Filter Data Table (For CR Value)" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="450,243" sap2010:WorkflowViewState.IdRef="FilterDataTable_35" OutputDataTable="[DT_OpTransaction_CR]" SelectColumnsMode="Remove">
                    <ui:FilterDataTable.Filters>
                      <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                        <ui:FilterOperationArgument BooleanOperator="And" Operator="CONTAINS">
                          <ui:FilterOperationArgument.Column>
                            <InArgument x:TypeArguments="x:Int32">[6]</InArgument>
                          </ui:FilterOperationArgument.Column>
                          <ui:FilterOperationArgument.Operand>
                            <InArgument x:TypeArguments="x:String">["CR"]</InArgument>
                          </ui:FilterOperationArgument.Operand>
                        </ui:FilterOperationArgument>
                      </scg:List>
                    </ui:FilterDataTable.Filters>
                    <ui:FilterDataTable.SelectColumns>
                      <scg:List x:TypeArguments="InArgument" Capacity="4">
                        <x:Null />
                      </scg:List>
                    </ui:FilterDataTable.SelectColumns>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:FilterDataTable>
                  <Sequence DisplayName="Sequence - DT_OpTransaction_CR to String Print" sap:VirtualizedContainerService.HintSize="450,505" sap2010:WorkflowViewState.IdRef="Sequence_1044">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <WriteLine sap2010:Annotation.AnnotationText="For Sheet Name-OpTransactionHistoryUX3" DisplayName="Write Line " sap:VirtualizedContainerService.HintSize="388,161" sap2010:WorkflowViewState.IdRef="WriteLine_455" Text="[&quot;11.22-&quot; + &quot; DT_OpTransaction_CR.Rows.Count &quot; &amp; &quot;=&quot; &amp;  DT_OpTransaction_CR.Rows.Count.ToString() +&#xA;Environment.NewLine + &#xA;&quot; DT_OpTransaction_CR.Columns.Count &quot; &amp; &quot;=&quot; &amp;  DT_OpTransaction_CR.Columns.Count.ToString()]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </WriteLine>
                    <ui:OutputDataTable DataTable="[DT_OpTransaction_CR]" DisplayName="Output Data Table" sap:VirtualizedContainerService.HintSize="388,120" sap2010:WorkflowViewState.IdRef="OutputDataTable_71" Text="[String159]" />
                    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="388,113" sap2010:WorkflowViewState.IdRef="WriteLine_454" Text="[&quot;11.23-&quot; +  &quot;DT_OpTransaction_CR (String159)=&quot; + String159]" />
                  </Sequence>
                </Sequence>
                <Sequence DisplayName="Sequence - For DR Value" sap:VirtualizedContainerService.HintSize="688,876" sap2010:WorkflowViewState.IdRef="Sequence_1045">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:FilterDataTable sap2010:Annotation.AnnotationText="Filter Data Table (CR &amp; DR Value from Cr/Dr Column  Value_For CR Value)" DataTable="[DT_OpTransaction]" DisplayName="Filter Data Table (For DR Value)" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="450,243" sap2010:WorkflowViewState.IdRef="FilterDataTable_36" OutputDataTable="[DT_OpTransaction_DR]" SelectColumnsMode="Remove">
                    <ui:FilterDataTable.Filters>
                      <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                        <ui:FilterOperationArgument BooleanOperator="And" Operator="NOTCONTAINS">
                          <ui:FilterOperationArgument.Column>
                            <InArgument x:TypeArguments="x:Int32">[6]</InArgument>
                          </ui:FilterOperationArgument.Column>
                          <ui:FilterOperationArgument.Operand>
                            <InArgument x:TypeArguments="x:String">["CR"]</InArgument>
                          </ui:FilterOperationArgument.Operand>
                        </ui:FilterOperationArgument>
                      </scg:List>
                    </ui:FilterDataTable.Filters>
                    <ui:FilterDataTable.SelectColumns>
                      <scg:List x:TypeArguments="InArgument" Capacity="4">
                        <x:Null />
                      </scg:List>
                    </ui:FilterDataTable.SelectColumns>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:FilterDataTable>
                  <Sequence DisplayName="Sequence - DT_OpTransaction_DR to String Print" sap:VirtualizedContainerService.HintSize="450,505" sap2010:WorkflowViewState.IdRef="Sequence_1046">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <WriteLine sap2010:Annotation.AnnotationText="For Sheet Name-OpTransactionHistoryUX3" DisplayName="Write Line " sap:VirtualizedContainerService.HintSize="388,161" sap2010:WorkflowViewState.IdRef="WriteLine_456" Text="[&quot;11.24-&quot; + &quot; DT_OpTransaction_DR.Rows.Count &quot; &amp; &quot;=&quot; &amp;  DT_OpTransaction_DR.Rows.Count.ToString() +&#xA;Environment.NewLine + &#xA;&quot; DT_OpTransaction_DR.Columns.Count &quot; &amp; &quot;=&quot; &amp;  DT_OpTransaction_DR.Columns.Count.ToString()]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </WriteLine>
                    <ui:OutputDataTable DataTable="[DT_OpTransaction_DR]" DisplayName="Output Data Table" sap:VirtualizedContainerService.HintSize="388,120" sap2010:WorkflowViewState.IdRef="OutputDataTable_72" Text="[String159]" />
                    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="388,113" sap2010:WorkflowViewState.IdRef="WriteLine_457" Text="[&quot;11.25-&quot; + &quot;DT_OpTransaction_DR (String159)=&quot; + String159]" />
                  </Sequence>
                </Sequence>
                <ui:ReadTextFile File="{x:Null}" Content="[OutputTextValue]" DisplayName="Read Text File" FileName="[TextFilePath + &quot;ZohoTextFile.txt&quot;]" sap:VirtualizedContainerService.HintSize="688,120" sap2010:WorkflowViewState.IdRef="ReadTextFile_1" />
                <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="688,130" sap2010:WorkflowViewState.IdRef="WriteLine_460" Text="[&quot;11.26-&quot; + &quot;OutputTextValue=&quot; + OutputTextValue]" />
                <Sequence sap:VirtualizedContainerService.HintSize="688,1202" sap2010:WorkflowViewState.IdRef="Sequence_1048">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:GenerateDataTable ColumnSeparators="{x:Null}" ColumnSizes="{x:Null}" NewLineSeparator="{x:Null}" Positions="{x:Null}" CSVParsing="False" DataTable="[OutPutTextFileValue]" DisplayName="Generate Data Table From Text" sap:VirtualizedContainerService.HintSize="450,241" sap2010:WorkflowViewState.IdRef="GenerateDataTable_1" Input="[OutputTextValue]" UseColumnHeader="True" />
                  <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Preration for TotalCrDrAmount and NetDrAmount" Code="Try&#xA;&#x9;&#x9;''Preparation of DataRowSet4&#xA;&#xA;&#x9;&#x9;''DT_SapLedgerDump.Rows(RowIndex2).Item(0).ToString().Trim()&#xA;&#x9;&#xA;&#x9;Dim Regex  As System.Text.RegularExpressions.Regex&#xA;&#x9;Dim DT7 As New System.Data.DataTable()&#xA;&#x9;Dim DT9 As New  System.Data.DataTable()&#xA;&#x9;Dim DT8 As New  System.Data.DataTable()&#xA;&#x9;''Dim DT10 As New  System.Data.DataTable()&#xA;&#x9;Dim DT11 As New  System.Data.DataTable()&#xA;&#x9;Dim String00 As String&#xA;&#x9;Dim String01 As String&#xA;&#x9;Dim String02 As String&#xA;&#x9;Dim String03 As String&#xA;&#x9;Dim String04 As String&#xA;&#x9;Dim String05 As String&#xA;&#x9;Dim String1 As String&#xA;&#x9;Dim String2 As String&#xA;&#x9;Dim String3 As String&#xA;&#x9;Dim TempString1() As String&#xA;&#x9;Dim TempString2() As String&#xA;&#x9;Dim TempString3() As String&#xA;&#x9;Dim UtrNo As String&#xA;&#x9;''Dim Amount As String&#xA;&#x9;Dim NetCrAmount As String&#xA;&#x9;'Dim NetDrAmount As String&#xA;&#x9;'Dim TotalCrDrAmount As String&#xA;&#x9;Dim DocumentNo As String&#xA;&#x9;Dim AccountNo As String&#xA;&#x9;Dim DocumentDate As String&#xA;&#x9;Dim LoopBoolean1 As Boolean&#xA;&#x9;Dim LoopBoolean2 As Boolean&#xA;&#x9;&#xA;&#x9;&#x9;''Dim DT7 As New System.Data.DataTable()&#x9;&#x9;&#x9;''new System.data.DataTable&#xA;&#x9;&#x9;'DT7=DTT4.Clone&#xA;&#x9;&#x9;'DT7.Rows.Clear() &#xA;&#x9;&#x9;'Dim DT8 As New  System.Data.DataTable()&#xA;&#x9;&#x9;'DT8=DTT4.Clone&#xA;&#x9;&#x9;'DT8.Rows.Clear()&#xA;&#x9;Dim NetAmount1 As Double&#x9;&#xA;&#x9;Dim NetAmount2 As Double&#x9;&#xA;&#x9;Dim Balance1 As Double&#x9;&#xA;&#x9;Dim Balance2 As Double&#x9;&#xA;&#x9;&#xA;&#x9;Dim i As Integer&#xA;&#x9;Dim j As Integer&#xA;&#x9;Dim n As Integer&#xA;&#x9;Dim obj1(0 To 10) As Object&#xA;&#x9;&#xA;&#x9;Dim temp1(1) As Object&#xA;&#x9;Dim temp2(9) As Object&#xA;&#x9;'Balance1 = 0&#xA;&#x9;'Balance2 = 0&#xA;&#x9;''DT7=DT_InputFile.Clone&#xA;&#x9;''DT7.Rows.Clear()&#xA;''&#x9;console.WriteLine(&quot;LN-27-DT_InputFile.Rows.Count)=&quot; + (DT_InputFile.Rows.Count).ToString())&#x9;&#x9;&#x9;&#x9;'&#xA;'&#x9;&#xA;''&#x9;console.WriteLine(&quot;Preration For DTT11&quot;)&#xA;&#x9;Console.WriteLine(&quot;LN-60-DT_OpTransaction_CR.Rows.Count-&quot; + DT_OpTransaction_CR.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-61-DT_OpTransaction_DR.Rows.Count-&quot; + DT_OpTransaction_DR.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-61-DT_OpTransaction.Rows.Count-&quot; + DT_OpTransaction.Rows.Count.ToString())&#xA;&#x9;i = 0&#xA;&#x9;NetAmount1 = 0&#xA;&#x9;For i=0 To DT_OpTransaction_CR.Rows.Count-1&#xA;&#x9;&#x9;'Console.WriteLine(&quot;LN-65-DT_OpTransaction_CR.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;If  (DT_OpTransaction_CR.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction_CR.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;&#x9;&#x9;&#x9;NetAmount1 = NetAmount1 + Convert.ToDouble(DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-69-NetAmount=&quot; + NetAmount1.ToString())&#xA;&#x9;&#x9;End If&#xA;&#x9;Next i&#xA;&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;NetCrAmount = NetAmount1.ToString().Trim()&#xA;&#x9;Console.WriteLine(&quot;LN-74-NetCrAmount=&quot; + NetCrAmount)&#xA;&#x9;&#xA;&#x9;NetAmount2 = 0&#xA;&#x9;For i=0 To DT_OpTransaction_DR.Rows.Count-1&#xA;&#x9;&#x9;'Console.WriteLine(&quot;LN-78-DT_OpTransaction_DR.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction_DR.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;If  (DT_OpTransaction_DR.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction_CR.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;&#x9;&#x9;&#x9;NetAmount2 = NetAmount2 + Convert.ToDouble(DT_OpTransaction_DR.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-82-NetAmount2=&quot; + NetAmount2.ToString())&#xA;&#x9;&#x9;End If&#xA;&#x9;Next i&#xA;&#x9;NetAmount2 = Math.Round(NetAmount2,2,MidpointRounding.AwayFromZero)&#xA;&#x9;NetDrAmount = NetAmount2.ToString().Trim()&#xA;&#x9;Console.WriteLine(&quot;LN-87-NetDrAmount=&quot; + NetDrAmount)&#xA;&#x9;'Balance1= NetAmount1 +  NetAmount2&#xA;&#x9;'Balance1 = Math.Round(Balance1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;'TotalCrDrAmount = Balance1.ToString().Trim()&#xA;&#x9;&#xA;&#x9;Balance1 = 0&#xA;&#x9;For i=0 To DT_OpTransaction.Rows.Count-1&#xA;&#x9;&#x9;'Console.WriteLine(&quot;LN-95-DT_OpTransaction.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;If  (DT_OpTransaction.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;&#x9;&#x9;&#x9;Balance1 = Balance1 + Convert.ToDouble(DT_OpTransaction.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-99-Balance1=&quot; + Balance1.ToString())&#xA;&#x9;&#x9;End If&#xA;&#x9;Next i&#xA;&#x9;Balance1 = Math.Round(Balance1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;TotalCrDrAmount = Balance1.ToString().Trim()&#xA;&#x9;Console.WriteLine(&quot;LN-104-TotalCrDrAmount=&quot; + TotalCrDrAmount)&#xA;&#x9;Console.WriteLine(&quot;LN-105-NetDrAmount=&quot; + NetDrAmount)&#xA;&#x9;&#xA;&#x9;OutPutTextFileValue.Rows(0).Item(2) = Double.Parse(TotalCrDrAmount.Trim())&#xA;&#x9;OutPutTextFileValue.Rows(1).Item(2) = Double.Parse(NetDrAmount.Trim())&#xA;&#xA;Catch ex As Exception&#xA;&#x9;&#x9;Console.WriteLine(&quot;Error    &quot;+ ex.ToString())&#xA;&#x9;&#x9;''Dim DT10 As New  System.Data.DataTable()&#xA;&#x9;&#x9;DT10 = New System.Data.DataTable()&#xA;&#x9;&#x9;Console.WriteLine(&quot;Error in prepration&quot;)&#xA;End Try&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;'For i=0 To DT_OpTransaction_CR.Rows.Count-1&#xA;&#x9;&#xA;&#x9;'If (row.Item(14).ToString().ToLower().Contains(&quot;reference_number&quot;) = False)&#xA;&#x9;&#xA;'&#x9;Console.WriteLine(&quot;LN-53-DTT10.Rows.Count-&quot; + DTT10.Rows.Count.ToString())&#xA;'&#x9;Console.WriteLine(&quot;LN-54-DTT11.Rows.Count-&quot; + DTT11.Rows.Count.ToString())&#xA;'&#x9;''Console.WriteLine(&quot;LN-55-&quot; + RecoWorkingString)&#xA;'&#x9;Console.WriteLine(&quot;LN-9=56-CurrentExcelSheetName-&quot; + CurrentExcelSheetName)&#xA;'&#x9;Console.WriteLine(&quot;LN-57-DT_Reco.Rows.Count-&quot; + DT_Reco.Rows.Count.ToString())&#xA;'&#x9;For Each row As DataRow In DT_Reco.Rows&#xA;&#x9;&#x9;'If (row.Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (row.Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True)  ''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#xA;&#x9;&#x9;'&#x9;row.Item(1)&#x9;= VendorName&#x9;&#x9;VendorCode&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'&#x9;row.Item(2)&#x9;= VendorCode&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;LN-62-&quot; )&#xA;&#x9;&#x9;'End If&#xA;&#x9;&#x9;'====&#xA;&#x9;&#x9;&#x9;'&#x9; NetAmount1 = 0&#xA;&#x9;&#x9;'&#x9;If (DTT10.Rows(i).item(0).ToString().ToLower().Contains(&quot;closing balance&quot;) = False)&#x9;&#xA;&#x9;&#x9;'&#x9;If ( (DTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;&#x9;'&#x9;NetAmount1 = Convert.ToDouble(DTT10.Rows(i).Item(1).ToString()) +  Convert.ToDouble(DTT10.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;'&#x9;Else&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount1 = NetAmount1&#xA;&#x9;&#x9;'&#x9;&#x9;End If&#xA;&#x9;&#x9;'&#x9;End If &#xA;&#x9;&#x9;'&#x9;&#x9;Next i&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount = NetAmount1.ToString()&#xA;&#x9;&#x9;&#x9;'====&#xA;'&#x9;Next row&#xA;&#x9;&#xA;&#x9;&#xA;'&#x9;For i=0 To DT_Reco.Rows.Count-1&#xA;'&#x9;&#x9;If  (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;private&quot;) = True)&#x9; And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;v/s&quot;) = True)&#xA;'&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= VendorName&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;If  (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor code&quot;) = True)&#x9;'' &#x9; And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#xA;'&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= VendorCode&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;If ((DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True)  And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;'And&#xA;'&#x9;&#x9;&#x9;''(DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#x9;&#x9;V/s&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-83-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'Balance1 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;&#x9;n = i&#xA;'&#x9;&#x9;End If&#xA;''&#x9;&#x9;'Balance1 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;If ((DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True)   And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Threpsi Ledger&quot;) = True ) )&#x9;''Vendor Ledger&#xA;'&#x9;&#x9;&#x9;'And&#xA;&#x9;&#x9;&#x9;''(DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#x9;&#x9;V/s&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-96-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'Balance2 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;&#x9;n = i&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;'Balance2 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;'If ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;net difference&quot;) = True) ) 'And &#xA;'&#x9;&#x9;&#x9;''NetAmount1 = Convert.ToDouble(DTT10.Rows(i).Item(1).ToString()) +  Convert.ToDouble(DTT10.Rows(i).Item(1).ToString())&#xA;'&#x9;&#x9;'&#x9;NetAmount1 = Balance1 + Balance2&#xA;&#x9;&#x9;'&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;&#x9;'&#x9;NetAmount = NetAmount1.ToString()&#xA;&#x9;&#x9;'&#x9;DT_Reco.Rows(i).Item(1)&#x9;= NetAmount&#xA;&#x9;&#x9;'End If&#xA;'&#x9;&#x9;If ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;round off&quot;) = True) And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;round off&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-107-&quot; )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;'&#x9;Console.WriteLine(&quot;LN-112-&quot;  + n.ToString())&#xA;'&#x9;For i=n To DT_Reco.Rows.Count-1&#xA;&#x9;'&#x9;If ( ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor code&quot;) = False) And&#xA;&#x9;&#x9;'&#x9;(DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;reconciliation&quot;) = False) ) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True) ) &#xA;'&#x9;&#x9;If  ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#x9; (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True)  And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;'' (DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;''(DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Threpsi Ledger&#xA;'&#x9;&#x9;&#x9;''For j= i +1 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;j = i +1&#xA;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-122-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;Do&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;invoice&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-125-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;invoice&quot;)= True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-130-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;returns&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;returns&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-139-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;payment&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;payment&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-148-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;credit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;credit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-157-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;''&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;debit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;debit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-161-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If (DT_Reco.Rows(j).Item(0).ToString().Length() = 0 = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;LoopBoolean1 = True&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;'&#x9;&#x9;&#x9;Loop While (LoopBoolean1 = False)&#xA;'&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;If  ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True) And&#x9; (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True)  And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Threpsi Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-179-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;j = i +1&#xA;''&#x9;&#x9;&#x9;Do&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;invoice&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-183-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;invoice&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-188-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;returns&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;returns&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-197-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;payment&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;payment&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-206-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;''&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;credit note&quot;) = True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;credit note&quot;)= True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-215-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;discount&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;discount&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-224-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;debit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;debit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-234-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;others&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;others&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-242-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;contra&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;contra&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-251-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If (DT_Reco.Rows(j).Item(0).ToString().Length() = 0 = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;LoopBoolean2 = True&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;'&#x9;&#x9;&#x9;Loop While (LoopBoolean2 = False)&#xA;'&#x9;&#x9;End If&#x9;&#xA;'&#x9;Next i&#xA;'&#x9;Console.WriteLine(&quot;LN-262-&quot; )&#xA;'&#x9;&#xA;'&#x9;DT10 = DT_Reco&#xA;&#x9;&#xA;&#x9;'====&#xA;&#x9;'&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-128 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-133 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(1).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If (x.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x.ToLower.Contains(&quot;closing balance&quot;)= False) )&#x9;&#xA;&#x9;'&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''===&#x9;&#xA;&#x9;'For i=0 To DT10.Rows.Count-1&#xA;&#x9;'&#x9;console.WriteLine(&quot;LN-87 - DTT10.Rows.Count (in All amt addition invoke code)&quot; &amp; &quot;=&quot; &amp;  DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'Next i&#xA;'&#x9;&#xA;&#x9;'For i=0 To  DT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(0).ToString()-&quot; + DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(1).ToString()-&quot; + DTT10.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;'&#x9;&#x9;Next i&#xA;&#x9;'For Each x In TypeNameList&#x9;&#x9;&#x9;'''TypeNameList&#x9;&#x9;&#x9;'' Document Type&#xA;&#x9;'&#x9;'Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;If (x.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x.ToLower.Contains(&quot;closing balance&quot;)= False) )&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(0).ToString()-&quot; + DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;Next i&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;5th time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = &quot;Derived Closing Balance&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;If ( (Amount.Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = Amount&#xA;&#x9;'&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-128 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-133 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(1).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;Next i&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;Difference-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = &quot;Difference&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;If ( (Difference.Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = Difference&#xA;&#x9;'&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;End If&#xA;&#x9;'&#x9;End If&#xA;&#x9;'Next x&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''x =0&#xA;&#x9;&#xA;&#x9;'For Each x1 In TypeNameList&#x9;&#x9;&#x9;&#xA;&#x9;'&#x9;If (x1.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x1.ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;&#x9;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(0) = x1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;End If&#xA;&#x9;'Next x1&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;'&#x9;For i=0 To TypeNameList.Count-1&#xA;'&#x9;''&#x9;If TypeNameList.IndexOf(&quot;Type&quot;)=-1 Then&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + TypeNameList.Item(i).ToString)&#xA;&#x9;''&#x9;End If&#xA;'&#x9;Next i&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;'&#x9;For Each x In TypeNameList&#x9;&#x9;&#x9;'''TypeNameList&#x9;&#x9;&#x9;'' Document Type&#xA;&#x9;&#x9;''Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;&#x9;&#xA;'&#x9;Next x&#xA;'&#x9;&#xA;&#x9;&#xA;'&#x9;For i=0 To TypeNameList.Count-1&#xA;&#x9;''&#x9;If TypeNameList.IndexOf(&quot;Type&quot;)=-1 Then&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + TypeNameList.Item(i).ToString)&#xA;&#x9;''&#x9;End If&#xA;'&#x9;Next i&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;&#xA;'&#x9;&#x9;If ( (DTT7.Rows(i).Item(6).ToString().Length &gt; 0) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Amount1 = Amount1 +  Convert.ToDouble(DTT7.Rows(i).Item(6).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;For Each row As DataRow In DT10.Rows&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;If ( (x = DTT10.Rows(i).Item(0).ToString()) = True) &#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;'&#x9;&#x9;Next row&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;For Each row As DataRow In DT_InputFile.Rows&#xA;'&#x9;&#x9;&#x9;&#x9;If (row.Item(0).ToString()&#x9;= &quot;Date&quot;) = False&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;If UniqueInvloiceNoList.IndexOf(row.Item(5).ToString)=-1 Then&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;UniqueInvloiceNoList.Add(row.Item(5).ToString)&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;End If &#xA;&#x9;&#x9;&#x9;&#x9;''Else&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;If UniqueInvloiceNoList.IndexOf(row.Item(2).ToString)=-1 Then&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;&#x9;UniqueInvloiceNoList.Add(row.Item(2).ToString)&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;End If &#xA;'&#x9;&#x9;&#x9;&#x9;End If &#xA;&#x9;&#x9;&#x9;&#x9;'console.WriteLine( row.Item(1).ToString)&#xA;'&#x9;&#x9;&#x9;Next row&#xA;&#xA;&#xA;&#xA;&#x9;'Do&#x9;&#x9;&#x9;''For Part-1 of Output Excel File&#xA;&#x9;''Values is being transfered to DT&#xA;&#x9;&#x9;''temp1(0) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;If (DT6.Rows(i).Item(0).ToString().Contains(&quot;00:00:00&quot;) = True)&#xA;&#x9;'&#x9;&#x9;String1 = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;&#x9;String1 = Regex.Replace(String1, &quot;/&quot;,&quot;-&quot;).Trim()&#xA;&#x9;'&#x9;&#x9;TempString1 = String1.Split({&quot; &quot;}, StringSplitOptions.None)&#xA;&#x9;&#x9;&#x9;''String1 = DateTime.FromOADate(convert.ToDouble(TempString1(0))).ToString(&quot;dd-MMM-yyyy&quot;)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-76-&quot; &amp; &quot; String1 &quot; &amp; &quot;=&quot; &amp; String1)&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-77-&quot; &amp; &quot; TempString1(0) &quot; &amp; &quot;=&quot; &amp; TempString1(0))&#xA;&#x9;&#x9;&#x9;''console.WriteLine(&quot;LN-57-&quot; &amp; &quot; String1 &quot; &amp; &quot;=&quot; &amp; String1)&#xA;&#x9;'&#x9;&#x9;TempString2 = TempString1(0).Split({&quot;-&quot;}, StringSplitOptions.None)&#xA;&#x9;'&#x9;&#x9;DocumentDate = TempString2(1).Trim() + &quot;-&quot; + TempString2(0).Trim() + &quot;-&quot; + TempString2(2).Trim()&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-81-&quot; &amp; &quot; DocumentDate- &quot; &amp; &quot;=&quot; &amp;  DocumentDate)&#xA;&#x9;'&#x9;&#x9;temp1(0) = DocumentDate&#xA;&#x9;'&#x9;Else&#xA;&#x9;'&#x9;&#x9;temp1(0) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;End If&#xA;&#x9;'&#x9;temp1(1) = DT6.Rows(i).Item(1).ToString()&#xA;&#x9;&#x9;'temp1(2) = DT6.Rows(i).Item(3).ToString()&#xA;&#x9;&#x9;'temp1(3) = DT6.Rows(i).Item(4).ToString()&#xA;&#x9;&#x9;'temp1(4) = DT6.Rows(i).Item(5).ToString()&#xA;&#x9;&#x9;'If (CDbl(DT6.Rows(i).Item(6).ToString()) &gt; 0)&#xA;&#x9;&#x9;'temp1(5) = DT6.Rows(i).Item(6).ToString()&#xA;&#x9;&#x9;'Else If (CDbl(DT6.Rows(i).Item(6).ToString()) &lt; 0)&#xA;&#x9;&#x9;'&#x9;temp1(5) = DT6.Rows(i).Item(6).ToString()&#xA;&#x9;&#x9;'Else&#xA;&#x9;&#x9;'&#x9;temp1(6) = &quot;0&quot;&#xA;&#x9;&#x9;'End If&#xA;&#x9;&#x9;&#xA;&#x9;'&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;DT10 = DT7&#xA;&#x9;&#x9;&#x9;''DT8.Merge(DT7)&#xA;&#x9;&#x9;''&#x9;&#x9;DT8.AcceptChanges()&#xA;&#x9;'&#x9;If (i = (DT6.Rows.Count-1) = True)&#xA;&#x9;'&#x9;&#x9;LoopBoolean1 = True&#xA;&#x9;'&#x9;End If &#xA;&#x9;'&#x9;i = i + 1&#xA;'&#x9;Loop While (LoopBoolean1= False)&#xA;&#x9;''console.WriteLine(&quot;LN-106-DT10.Rows.Count at IC-5 Invoice Code=&quot; + (DT10.Rows.Count).ToString())&#xA;&#x9;&#xA;" DisplayName="Invoke code-Preration for TotalCrDrAmount" sap:VirtualizedContainerService.HintSize="450,236" sap2010:WorkflowViewState.IdRef="InvokeCode_220">
                    <ui:InvokeCode.Arguments>
                      <InArgument x:TypeArguments="scg:List(x:String)" x:Key="TypeNameList">[TypeNameList]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DTT10">[DTT10]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DTT11">[DTT11]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Amount">[Amount]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Difference">[Difference]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key=" RecoWorkingString">[RecoWorkingString]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="VendorName">[VendorName]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="VendorCode">[VendorCode]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_Reco">[DT_Reco]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="CurrentExcelSheetName">[CurrentExcelSheetName]</InArgument>
                      <OutArgument x:TypeArguments="sd:DataTable" x:Key="DT10">[DTT15]</OutArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction_DR">[DT_OpTransaction_DR]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction_CR">[DT_OpTransaction_CR]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction">[DT_OpTransaction]</InArgument>
                      <InOutArgument x:TypeArguments="sd:DataTable" x:Key="OutPutTextFileValue">[OutPutTextFileValue]</InOutArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="TotalCrDrAmount">[TotalCrDrAmount]</OutArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="NetDrAmount">[NetDrAmount]</OutArgument>
                    </ui:InvokeCode.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeCode>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="450,92" sap2010:WorkflowViewState.IdRef="CommentOut_335">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,255" sap2010:WorkflowViewState.IdRef="Sequence_1080">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:WriteRange AddHeaders="True" sap2010:Annotation.AnnotationText="ColumnValue = 1 here" DataTable="[OutPutTextFileValue]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="354,170" sap2010:WorkflowViewState.IdRef="WriteRange_77" SheetName="Reco" StartingCell="[&quot;A&quot; + ColumnValue.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:WriteRange>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <Sequence DisplayName="Sequence - OutPutTextFileValue to String Print" sap:VirtualizedContainerService.HintSize="450,505" sap2010:WorkflowViewState.IdRef="Sequence_1047">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <WriteLine sap2010:Annotation.AnnotationText="For Sheet Name-OpTransactionHistoryUX3" DisplayName="Write Line " sap:VirtualizedContainerService.HintSize="388,161" sap2010:WorkflowViewState.IdRef="WriteLine_458" Text="[&quot;11.27-&quot; + &quot; OutPutTextFileValue.Rows.Count &quot; &amp; &quot;=&quot; &amp;  OutPutTextFileValue.Rows.Count.ToString() +&#xA;Environment.NewLine + &#xA;&quot; OutPutTextFileValue.Columns.Count &quot; &amp; &quot;=&quot; &amp;  OutPutTextFileValue.Columns.Count.ToString()]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </WriteLine>
                    <ui:OutputDataTable DataTable="[OutPutTextFileValue]" DisplayName="Output Data Table" sap:VirtualizedContainerService.HintSize="388,120" sap2010:WorkflowViewState.IdRef="OutputDataTable_73" Text="[String159]" />
                    <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="388,113" sap2010:WorkflowViewState.IdRef="WriteLine_459" Text="[&quot;11.28-&quot; + &quot;OutPutTextFileValue (String159)=&quot; + String159]" />
                  </Sequence>
                </Sequence>
                <ui:BuildDataTable DataTable="[DT_ExtraSheet]" DisplayName="Build Data Table" sap:VirtualizedContainerService.HintSize="688,100" sap2010:WorkflowViewState.IdRef="BuildDataTable_55" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;No&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;reference_number&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Value_x0020_Date&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Txn_x0020_Posted_x0020_Date&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Transaction_x0020_Amount_x0020__x0028_INR_x0029_&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;&lt;/NewDataSet&gt;" />
                <Sequence sap:VirtualizedContainerService.HintSize="688,766" sap2010:WorkflowViewState.IdRef="Sequence_1049">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="CommentOut_327">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="512,672" sap2010:WorkflowViewState.IdRef="Sequence_1051">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[DT_Zoho]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="450,587" sap2010:WorkflowViewState.IdRef="ForEachRow_34">
                          <ui:ForEachRow.Body>
                            <ActivityAction x:TypeArguments="sd:DataRow">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
                              </ActivityAction.Argument>
                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="416,400" sap2010:WorkflowViewState.IdRef="Sequence_1050">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:LookupDataTable CellValue="{x:Null}" LookupColumnName="{x:Null}" LookupDataColumn="{x:Null}" TargetColumnIndex="{x:Null}" TargetColumnName="{x:Null}" TargetDataColumn="{x:Null}" DataTable="[DT_SapLedgerDump]" DisplayName="Lookup Data Table" sap:VirtualizedContainerService.HintSize="354,315" sap2010:WorkflowViewState.IdRef="LookupDataTable_29" LookupColumnIndex="[2]" LookupValue="[CurrentRow.Item(0).ToString()]" RowIndex="[RowIndex2]">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:LookupDataTable>
                              </Sequence>
                            </ActivityAction>
                          </ui:ForEachRow.Body>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:ForEachRow>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_334">
                    <Assign.To>
                      <OutArgument x:TypeArguments="sd:DataTable">[DTT111]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="sd:DataTable">[DT_OpTransaction_CR]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="12&#xA;Preration for CreditNotAccounted, TDJadj, NotReflectingInBank, Round Off&#xA;2nd sequence after 2.15 PM on 18-4-2024" Code="Try&#xA;&#x9;&#x9;''Preparation of DataRowSet4&#xA;&#xA;&#x9;&#x9;''DT_SapLedgerDump.Rows(RowIndex2).Item(0).ToString().Trim()&#xA;&#x9;&#xA;&#x9;Dim Regex  As System.Text.RegularExpressions.Regex&#xA;&#x9;Dim DT7 As New System.Data.DataTable()&#xA;&#x9;'Dim DT9 As New  System.Data.DataTable()&#xA;&#x9;Dim DT8 As New  System.Data.DataTable()&#xA;&#x9;Dim DT10 As New  System.Data.DataTable()&#xA;&#x9;'Dim DT11 As New  System.Data.DataTable()&#xA;&#x9;Dim String00 As String&#xA;&#x9;Dim String01 As String&#xA;&#x9;Dim String02 As String&#xA;&#x9;Dim String03 As String&#xA;&#x9;Dim String04 As String&#xA;&#x9;Dim String05 As String&#xA;&#x9;Dim String1 As String&#xA;&#x9;Dim String2 As String&#xA;&#x9;Dim String3 As String&#xA;&#x9;'Dim TDSadj As String&#xA;&#x9;Dim TempString1() As String&#xA;&#x9;Dim TempString2() As String&#xA;&#x9;Dim TempString3() As String&#xA;&#x9;Dim UtrNo As String&#xA;&#x9;''Dim Amount As String&#xA;&#x9;Dim NetCrAmount As String&#xA;&#x9;Dim NetDrAmount As String&#xA;&#x9;'Dim CreditNotAccounted As String&#xA;&#x9;Dim DocumentNo As String&#xA;&#x9;Dim AccountNo As String&#xA;&#x9;Dim DocumentDate As String&#xA;&#x9;Dim String1Boolean As Boolean&#xA;&#x9;Dim LoopBoolean1 As Boolean&#xA;&#x9;Dim LoopBoolean2 As Boolean&#xA;&#x9;Dim RefNoFound As Boolean&#xA;&#x9;&#xA;&#x9;&#x9;'Dim DT7 As New System.Data.DataTable()&#x9;&#x9;&#x9;''new System.data.DataTable&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'DT7.Rows.Clear() &#xA;&#x9;&#x9;'Dim DT8 As New  System.Data.DataTable()&#xA;&#x9;&#x9;'DT8=DTT4.Clone&#xA;&#x9;&#x9;'DT8.Rows.Clear()&#xA;&#x9;Dim NetAmount1 As Double&#x9;&#xA;&#x9;Dim NetAmount2 As Double&#x9;&#xA;&#x9;Dim Balance1 As Double&#x9;&#xA;&#x9;Dim Balance2 As Double&#x9;&#xA;&#x9;Dim NotReflectingInBank As Double = 0&#xA;&#x9;&#xA;&#x9;Dim i As Integer&#xA;&#x9;Dim j As Integer&#xA;&#x9;Dim n As Integer&#xA;&#x9;Dim obj1(0 To 10) As Object&#xA;&#x9;&#xA;&#x9;Dim temp1(1) As Object&#xA;&#x9;Dim temp2(9) As Object&#xA;&#x9;'Balance1 = 0&#xA;&#x9;'Balance2 = 0&#xA;&#x9;''DT7=DT_InputFile.Clone&#xA;&#x9;''DT7.Rows.Clear()&#xA;''&#x9;console.WriteLine(&quot;LN-27-DT_InputFile.Rows.Count)=&quot; + (DT_InputFile.Rows.Count).ToString())&#x9;&#x9;&#x9;&#x9;'&#xA;'&#x9;&#xA;''&#x9;console.WriteLine(&quot;Preration For DTT11&quot;)  DT_Zoho&#xA;&#x9;Console.WriteLine(&quot;LN-62-DT_OpTransaction_CR.Rows.Count-&quot; + DT_OpTransaction_CR.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-63-DT_OpTransaction_DR.Rows.Count-&quot; + DT_OpTransaction_DR.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-64-DT_OpTransaction.Rows.Count-&quot; + DT_OpTransaction.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-65-DT_Zoho.Rows.Count-&quot; + DT_Zoho.Rows.Count.ToString())&#xA;&#x9;i = 0 &#xA;&#x9;String1 = &quot;&quot;&#xA;&#x9;String2 = &quot;&quot;&#xA;&#x9;'For Each row As DataRow In DT_Zoho.Rows&#xA;&#x9;&#x9;'Console.WriteLine(&quot;LN-70-&quot; + row.Item(14).ToString())&#xA;&#x9;'Next row&#xA;&#x9;DT9 = DT_OpTransaction_CR&#xA;&#x9;For Each row As DataRow In DT_Zoho.Rows&#xA;&#x9;&#x9;If (String.IsNullOrEmpty(row.Item(14).ToString()) = True) &#xA;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-74-&quot; + row.Item(14).ToString())&#xA;&#x9;&#x9;&#x9;If (row.Item(17).ToString().ToLower().Contains(&quot;customer_name&quot;) = False) And (row.Item(12).ToString().ToLower().Contains(&quot;tds adjustment&quot;) = False) &#xA;&#x9;&#x9;&#x9;&#x9;String3 = row.Item(17).ToString().ToLower()&#xA;&#x9;&#x9;&#x9;&#x9;TempString1 =  String3.Split({&quot; &quot;}, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;&#x9;&#x9;String1 = TempString1(0).Trim()&#xA;&#x9;&#x9;&#x9;&#x9;String1Boolean = True&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;If (String1Boolean = True)&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-82-String1=&quot; +String1)&#xA;&#x9;&#x9;&#x9;&#x9;For Each row1 As DataRow In DT_OpTransaction.Rows&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If (row1.Item(5).ToString().ToLower().Contains(String1) = True)  And (row1.Item(1).ToString().ToLower().Contains(&quot;transaction id&quot;) = False)  ''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-85-&quot; + row1.Item(1).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;String2 = row1.Item(1).ToString()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;Next row1&#xA;&#x9;&#x9;&#x9;&#x9;If (String.IsNullOrEmpty(String2) = False)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-90-String2=&quot; +String2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If (row.Item(14).ToString().ToLower().Contains(&quot;reference_number&quot;) = False) And (row.Item(14).ToString().ToLower().Contains(String2) = True) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'String1 = row.Item(17).ToString().ToLower()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-93-String2=&quot; +String2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If (row.Item(12).ToString().ToLower().Contains(&quot;tds adjustment&quot;) = True)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;row.Item(14) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Else If (row.Item(14).ToString().ToLower().Contains(&quot;reference_number&quot;) = False) And (row.Item(14).ToString().ToLower().Contains(String2) = False) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;row.Item(14) = String2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;String1Boolean = False&#xA;&#x9;&#x9;&#x9;&#x9;String1 = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;String2 = &quot;&quot;&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;'Else&#xA;&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-106-&quot; + row.Item(14).ToString())&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;If  (row.Item(12).ToString().ToLower().Contains(&quot;tds adjustment&quot;) = True) &#xA;&#x9;&#x9;&#x9;TDSadj = row.Item(15).ToString().ToLower()&#xA;&#x9;&#x9;&#x9;OutPutTextFileValue.Rows(5).Item(2) = Double.Parse(TDSadj)&#xA;&#x9;&#x9;End If&#x9;&#x9;&#xA;&#x9;Next row&#xA;&#x9;For Each row As DataRow In DT_Zoho.Rows&#xA;&#x9;&#x9;Console.WriteLine(&quot;LN-116-&quot; + row.Item(14).ToString())&#xA;&#x9;Next row&#xA;&#x9;Console.WriteLine(&quot;LN-115-TDSadj value=&quot; +TDSadj)&#xA;&#x9;'For Each row As DataRow In DT_OpTransaction_CR.Rows&#xA;&#x9;'&#x9;For Each row1 As DataRow In DT_Zoho.Rows&#xA;&#x9;'&#x9;&#x9;If ( (row.Item(1).ToString())  = (row1.Item(14).ToString()) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.Remove()&#xA;&#x9;'&#x9;&#x9;End If&#x9;&#x9;&#xA;&#x9;'&#x9;Next row1&#xA;&#x9;'Next row&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;For Each row As DataRow In DT_OpTransaction_CR.Rows&#xA;&#x9;&#x9;DT7.ImportRow(row)&#xA;&#x9;Next row&#xA;&#x9;Console.WriteLine(&quot;LN-129-DT7.Rows.Count-&quot; + DT7.Rows.Count.ToString())&#xA;&#x9;&#xA;&#x9;'Calculate NotReflectingInBank&#xA;&#x9;For j=0 To DT_Zoho.Rows.Count-1&#xA;&#x9;&#x9;RefNoFound = False&#xA;&#x9;&#x9;For i=0 To DT_OpTransaction_CR.Rows.Count-1&#xA;&#x9;&#x9;&#x9;If DT_OpTransaction_CR.Rows(i).Item(1).ToString()  = DT_Zoho.Rows(j).Item(14).ToString()&#xA;&#x9;&#x9;&#x9;&#x9;RefNoFound = True&#xA;&#x9;&#x9;&#x9;&#x9;If IsNumeric(DT_OpTransaction_CR.Rows(i).Item(7)) And IsNumeric(DT_Zoho.Rows(j).Item(15)) And DT_Zoho.Rows(j).Item(14).ToString().Trim() &lt;&gt; &quot;&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If Double.Parse(DT_OpTransaction_CR.Rows(i).Item(7).ToString()) &gt; Double.Parse(DT_Zoho.Rows(j).Item(15).ToString()) Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_ExtraSheet.Rows.Add( { DT_OpTransaction_CR.Rows(i).Item(0).ToString(), DT_OpTransaction_CR.Rows(i).Item(1).ToString(), &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_OpTransaction_CR.Rows(i).Item(2).ToString(), DT_OpTransaction_CR.Rows(i).Item(3).ToString(), &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_OpTransaction_CR.Rows(i).Item(7).ToString() } )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;NotReflectingInBank = NotReflectingInBank + Double.Parse(DT_Zoho.Rows(j).Item(15).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;Next i&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If RefNoFound = False And IsNumeric(DT_Zoho.Rows(j).Item(15)) And DT_Zoho.Rows(j).Item(14).ToString().Trim() &lt;&gt; &quot;&quot; Then&#xA;&#x9;&#x9;&#x9;NotReflectingInBank = NotReflectingInBank + Double.Parse(DT_Zoho.Rows(j).Item(15).ToString())&#xA;&#x9;&#x9;End If&#xA;&#x9;Next j&#xA;&#x9;&#xA;&#x9;Console.WriteLine(&quot;DT-ExtraSjeet-&quot;+DT_ExtraSheet.Rows.Count.ToString())&#xA;&#x9;&#xA;&#x9;For j=0 To DT_Zoho.Rows.Count-1&#xA;&#x9;&#x9;RefNoFound = False&#xA;&#x9;&#x9;For i=0 To DT_OpTransaction_CR.Rows.Count-1&#xA;&#x9;&#x9;&#x9;If ( (DT_OpTransaction_CR.Rows(i).Item(1).ToString())  = (DT_Zoho.Rows(j).Item(14).ToString()) ) 'And&#xA;&#x9;&#x9;&#x9;&#x9;'(DT_Zoho.Rows.Item(14).ToString().ToLower().Contains(&quot;reference_number&quot;) = False)&#xA;&#x9;&#x9;&#x9;&#x9;'DT7.Rows.Remove(DT_OpTransaction_CR.Rows(i))&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-135-DT_OpTransaction_CR.Rows(i).Item(1).ToString()&quot; + DT_OpTransaction_CR.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-136-i-&quot; + i.ToString())&#xA;&#x9;&#x9;&#x9;&#x9;DT_OpTransaction_CR.Rows.RemoveAt(i)&#xA;&#x9;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;&#x9;End If&#x9;&#xA;&#x9;&#x9;Next i&#xA;&#x9;Next j&#xA;&#x9;&#xA;&#x9;DT8 = DT_OpTransaction_CR&#xA;&#x9;Console.WriteLine(&quot;LN-142-DT8.Rows.Count-&quot; + DT8.Rows.Count.ToString())&#x9;&#xA;&#x9;Console.WriteLine(&quot;LN-143-DT7.Rows.Count-&quot; + DT7.Rows.Count.ToString())&#xA;&#x9;For Each row As DataRow In DT8.Rows&#xA;&#x9;&#x9;Console.WriteLine(&quot;LN-146-&quot; + row.Item(0).ToString())&#xA;&#x9;&#x9;Console.WriteLine(&quot;LN-147-&quot; + row.Item(1).ToString())&#xA;&#x9;Next row&#xA;&#x9;NetAmount1 = 0&#xA;&#x9;For i=0 To DT_OpTransaction_CR.Rows.Count-1&#xA;'&#x9;&#x9;'Console.WriteLine(&quot;LN-65-DT_OpTransaction_CR.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;If  (DT_OpTransaction_CR.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction_CR.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;&#x9;&#x9;&#x9;NetAmount1 = NetAmount1 + Convert.ToDouble(DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-69-NetAmount=&quot; + NetAmount1.ToString())&#xA;&#x9;&#x9;End If&#xA;&#x9;Next i&#xA;&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;CreditNotAccounted = NetAmount1.ToString().Trim()&#xA;&#x9;OutPutTextFileValue.Rows(2).Item(2) = Double.Parse(CreditNotAccounted)&#xA;&#x9;OutPutTextFileValue.Rows(4).Item(2) = 1&#xA;&#x9;OutPutTextFileValue.Rows(6).Item(2) = NotReflectingInBank&#xA;&#x9;Console.WriteLine(&quot;LN-175-CreditNotAccounted=&quot; + CreditNotAccounted)&#xA;&#x9;Console.WriteLine(&quot;LN-176-NotReflectingInBank=&quot; + NotReflectingInBank.ToString())&#xA;&#x9;'CurrentRow2.Item(0).ToString()&#xA;&#x9;'DataRowSet2 = {DT_SapLedgerDump.Rows(RowIndex1).Item(0).ToString(), PdfFileName, DateValue, Amount,&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_SapLedgerDump.Rows(RowIndex1).Item(6).ToString(),PostingDate}&#xA;&#x9;'console.WriteLine(&quot;-&quot;&amp; &quot; DataRowSet2(0) value- &quot; &amp; &quot;=&quot; &amp;  DataRowSet2(0).ToString())&#xA;&#x9;'DT10 = OutPutTextFileValue&#xA;&#x9;'For Each row As DataRow In DT10.Rows&#xA;&#x9;'&#x9;Console.WriteLine(&quot;LN-168-&quot; + row.Item(2).ToString())&#xA;&#x9;'Next row&#xA;&#x9;'For i=0 To DT10.Rows.Count-1&#xA;&#x9;'&#x9;If (i=3)&#xA;&#x9;'&#x9;&#x9;DT10.Rows(i).Item(2) = CreditNotAccounted&#xA;&#x9;'&#x9;End If&#xA;&#x9;'Next i&#xA;&#x9;'DT11 = DT10&#xA;&#x9;'DT11 OutPutTextFileValue&#xA;&#x9;'For Each row As DataRow In DT11.Rows&#xA;&#x9;'&#x9;Console.WriteLine(&quot;LN-174-&quot; + row.Item(2).ToString())&#xA;&#x9;'Next row&#xA;Catch ex As Exception&#xA;&#x9;&#x9;Console.WriteLine(&quot;Error    &quot;+ ex.ToString())&#xA;&#x9;&#x9;Dim DT10 As New  System.Data.DataTable()&#xA;&#x9;&#x9;DT10 = New System.Data.DataTable()&#xA;&#x9;&#x9;Console.WriteLine(&quot;Error in prepration of DT_Zoho.Rows Data Table.&quot;)&#xA;End Try&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'&#x9;row.Item(1)&#x9;= VendorName&#x9;&#x9;VendorCode&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'&#x9;row.Item(2)&#x9;= VendorCode&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;LN-74-&quot; + row1.Item(1).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;'&#x9;NetAmount1 = 0&#xA;'&#x9;For i=0 To DT_OpTransaction_CR.Rows.Count-1&#xA;'&#x9;&#x9;'Console.WriteLine(&quot;LN-65-DT_OpTransaction_CR.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;If  (DT_OpTransaction_CR.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;'&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction_CR.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;'&#x9;&#x9;&#x9;NetAmount1 = NetAmount1 + Convert.ToDouble(DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-69-NetAmount=&quot; + NetAmount1.ToString())&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;'&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;NetCrAmount = NetAmount1.ToString().Trim()&#xA;'&#x9;Console.WriteLine(&quot;LN-74-NetCrAmount=&quot; + NetCrAmount)&#xA;'&#x9;&#xA;'&#x9;NetAmount2 = 0&#xA;'&#x9;For i=0 To DT_OpTransaction_DR.Rows.Count-1&#xA;'&#x9;&#x9;'Console.WriteLine(&quot;LN-78-DT_OpTransaction_DR.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction_DR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;If  (DT_OpTransaction_DR.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;'&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction_CR.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;'&#x9;&#x9;&#x9;NetAmount2 = NetAmount2 + Convert.ToDouble(DT_OpTransaction_DR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-82-NetAmount2=&quot; + NetAmount2.ToString())&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;''&#x9;NetAmount2 = Math.Round(NetAmount2,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;NetDrAmount = NetAmount2.ToString().Trim()&#xA;'&#x9;Console.WriteLine(&quot;LN-87-NetDrAmount=&quot; + NetDrAmount)&#xA;&#x9;'Balance1= NetAmount1 +  NetAmount2&#xA;''&#x9;'Balance1 = Math.Round(Balance1,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;'TotalCrDrAmount = Balance1.ToString().Trim()&#xA;'&#x9;&#xA;'&#x9;Balance1 = 0&#xA;'&#x9;For i=0 To DT_OpTransaction.Rows.Count-1&#xA;'&#x9;&#x9;'Console.WriteLine(&quot;LN-95-DT_OpTransaction.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction.Rows(i).Item(7).ToString())&#xA;''&#x9;&#x9;If  (DT_OpTransaction.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;''&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;'&#x9;&#x9;&#x9;Balance1 = Balance1 + Convert.ToDouble(DT_OpTransaction.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-99-Balance1=&quot; + Balance1.ToString())&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;'&#x9;Balance1 = Math.Round(Balance1,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;TotalCrDrAmount = Balance1.ToString().Trim()&#xA;'&#x9;Console.WriteLine(&quot;LN-104-TotalCrDrAmount=&quot; + TotalCrDrAmount)&#xA;'&#x9;Console.WriteLine(&quot;LN-105-TotalCrDrAmount=&quot; + TotalCrDrAmount)&#xA;'&#x9;&#xA;&#x9;&#xA;'&#x9;Console.WriteLine(&quot;LN-53-DTT10.Rows.Count-&quot; + DTT10.Rows.Count.ToString())&#xA;'&#x9;Console.WriteLine(&quot;LN-54-DTT11.Rows.Count-&quot; + DTT11.Rows.Count.ToString())&#xA;'&#x9;''Console.WriteLine(&quot;LN-55-&quot; + RecoWorkingString)&#xA;'&#x9;Console.WriteLine(&quot;LN-9=56-CurrentExcelSheetName-&quot; + CurrentExcelSheetName)&#xA;'&#x9;Console.WriteLine(&quot;LN-57-DT_Reco.Rows.Count-&quot; + DT_Reco.Rows.Count.ToString())&#xA;'&#x9;For Each row As DataRow In DT_Reco.Rows&#xA;&#x9;&#x9;'If (row.Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (row.Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True)  ''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#xA;&#x9;&#x9;'&#x9;row.Item(1)&#x9;= VendorName&#x9;&#x9;VendorCode&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'&#x9;row.Item(2)&#x9;= VendorCode&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;LN-62-&quot; )&#xA;&#x9;&#x9;'End If&#xA;&#x9;&#x9;'====&#xA;&#x9;&#x9;&#x9;'&#x9; NetAmount1 = 0&#xA;&#x9;&#x9;'&#x9;If (DTT10.Rows(i).item(0).ToString().ToLower().Contains(&quot;closing balance&quot;) = False)&#x9;&#xA;&#x9;&#x9;'&#x9;If ( (DTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;&#x9;'&#x9;NetAmount1 = Convert.ToDouble(DTT10.Rows(i).Item(1).ToString()) +  Convert.ToDouble(DTT10.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;'&#x9;Else&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount1 = NetAmount1&#xA;&#x9;&#x9;'&#x9;&#x9;End If&#xA;&#x9;&#x9;'&#x9;End If &#xA;&#x9;&#x9;'&#x9;&#x9;Next i&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount = NetAmount1.ToString()&#xA;&#x9;&#x9;&#x9;'====&#xA;'&#x9;Next row&#xA;&#x9;&#xA;&#x9;&#xA;'&#x9;For i=0 To DT_Reco.Rows.Count-1&#xA;'&#x9;&#x9;If  (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;private&quot;) = True)&#x9; And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;v/s&quot;) = True)&#xA;'&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= VendorName&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;If  (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor code&quot;) = True)&#x9;'' &#x9; And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#xA;'&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= VendorCode&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;If ((DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True)  And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;'And&#xA;'&#x9;&#x9;&#x9;''(DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#x9;&#x9;V/s&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-83-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'Balance1 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;&#x9;n = i&#xA;'&#x9;&#x9;End If&#xA;''&#x9;&#x9;'Balance1 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;If ((DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True)   And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Threpsi Ledger&quot;) = True ) )&#x9;''Vendor Ledger&#xA;'&#x9;&#x9;&#x9;'And&#xA;&#x9;&#x9;&#x9;''(DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#x9;&#x9;V/s&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-96-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'Balance2 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;&#x9;n = i&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;'Balance2 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;'If ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;net difference&quot;) = True) ) 'And &#xA;'&#x9;&#x9;&#x9;''NetAmount1 = Convert.ToDouble(DTT10.Rows(i).Item(1).ToString()) +  Convert.ToDouble(DTT10.Rows(i).Item(1).ToString())&#xA;'&#x9;&#x9;'&#x9;NetAmount1 = Balance1 + Balance2&#xA;&#x9;&#x9;'&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;&#x9;'&#x9;NetAmount = NetAmount1.ToString()&#xA;&#x9;&#x9;'&#x9;DT_Reco.Rows(i).Item(1)&#x9;= NetAmount&#xA;&#x9;&#x9;'End If&#xA;'&#x9;&#x9;If ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;round off&quot;) = True) And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;round off&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-107-&quot; )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;'&#x9;Console.WriteLine(&quot;LN-112-&quot;  + n.ToString())&#xA;'&#x9;For i=n To DT_Reco.Rows.Count-1&#xA;&#x9;'&#x9;If ( ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor code&quot;) = False) And&#xA;&#x9;&#x9;'&#x9;(DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;reconciliation&quot;) = False) ) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True) ) &#xA;'&#x9;&#x9;If  ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#x9; (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True)  And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;'' (DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;''(DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Threpsi Ledger&#xA;'&#x9;&#x9;&#x9;''For j= i +1 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;j = i +1&#xA;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-122-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;Do&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;invoice&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-125-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;invoice&quot;)= True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-130-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;returns&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;returns&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-139-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;payment&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;payment&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-148-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;credit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;credit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-157-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;''&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;debit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;debit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-161-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If (DT_Reco.Rows(j).Item(0).ToString().Length() = 0 = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;LoopBoolean1 = True&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;'&#x9;&#x9;&#x9;Loop While (LoopBoolean1 = False)&#xA;'&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;If  ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True) And&#x9; (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True)  And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Threpsi Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-179-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;j = i +1&#xA;''&#x9;&#x9;&#x9;Do&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;invoice&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-183-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;invoice&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-188-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;returns&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;returns&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-197-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;payment&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;payment&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-206-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;''&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;credit note&quot;) = True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;credit note&quot;)= True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-215-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;discount&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;discount&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-224-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;debit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;debit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-234-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;others&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;others&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-242-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;contra&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;contra&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-251-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If (DT_Reco.Rows(j).Item(0).ToString().Length() = 0 = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;LoopBoolean2 = True&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;'&#x9;&#x9;&#x9;Loop While (LoopBoolean2 = False)&#xA;'&#x9;&#x9;End If&#x9;&#xA;'&#x9;Next i&#xA;'&#x9;Console.WriteLine(&quot;LN-262-&quot; )&#xA;'&#x9;&#xA;'&#x9;DT10 = DT_Reco&#xA;&#x9;&#xA;&#x9;'====&#xA;&#x9;'&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-128 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-133 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(1).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If (x.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x.ToLower.Contains(&quot;closing balance&quot;)= False) )&#x9;&#xA;&#x9;'&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''===&#x9;&#xA;&#x9;'For i=0 To DT10.Rows.Count-1&#xA;&#x9;'&#x9;console.WriteLine(&quot;LN-87 - DTT10.Rows.Count (in All amt addition invoke code)&quot; &amp; &quot;=&quot; &amp;  DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'Next i&#xA;'&#x9;&#xA;&#x9;'For i=0 To  DT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(0).ToString()-&quot; + DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(1).ToString()-&quot; + DTT10.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;'&#x9;&#x9;Next i&#xA;&#x9;'For Each x In TypeNameList&#x9;&#x9;&#x9;'''TypeNameList&#x9;&#x9;&#x9;'' Document Type&#xA;&#x9;'&#x9;'Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;If (x.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x.ToLower.Contains(&quot;closing balance&quot;)= False) )&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(0).ToString()-&quot; + DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;Next i&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;5th time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = &quot;Derived Closing Balance&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;If ( (Amount.Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = Amount&#xA;&#x9;'&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-128 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-133 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(1).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;Next i&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;Difference-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = &quot;Difference&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;If ( (Difference.Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = Difference&#xA;&#x9;'&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;End If&#xA;&#x9;'&#x9;End If&#xA;&#x9;'Next x&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''x =0&#xA;&#x9;&#xA;&#x9;'For Each x1 In TypeNameList&#x9;&#x9;&#x9;&#xA;&#x9;'&#x9;If (x1.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x1.ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;&#x9;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(0) = x1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;End If&#xA;&#x9;'Next x1&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;'&#x9;For i=0 To TypeNameList.Count-1&#xA;'&#x9;''&#x9;If TypeNameList.IndexOf(&quot;Type&quot;)=-1 Then&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + TypeNameList.Item(i).ToString)&#xA;&#x9;''&#x9;End If&#xA;'&#x9;Next i&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;'&#x9;For Each x In TypeNameList&#x9;&#x9;&#x9;'''TypeNameList&#x9;&#x9;&#x9;'' Document Type&#xA;&#x9;&#x9;''Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;&#x9;&#xA;'&#x9;Next x&#xA;'&#x9;&#xA;&#x9;&#xA;'&#x9;For i=0 To TypeNameList.Count-1&#xA;&#x9;''&#x9;If TypeNameList.IndexOf(&quot;Type&quot;)=-1 Then&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + TypeNameList.Item(i).ToString)&#xA;&#x9;''&#x9;End If&#xA;'&#x9;Next i&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;&#xA;'&#x9;&#x9;If ( (DTT7.Rows(i).Item(6).ToString().Length &gt; 0) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Amount1 = Amount1 +  Convert.ToDouble(DTT7.Rows(i).Item(6).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;For Each row As DataRow In DT10.Rows&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;If ( (x = DTT10.Rows(i).Item(0).ToString()) = True) &#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;'&#x9;&#x9;Next row&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;For Each row As DataRow In DT_InputFile.Rows&#xA;'&#x9;&#x9;&#x9;&#x9;If (row.Item(0).ToString()&#x9;= &quot;Date&quot;) = False&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;If UniqueInvloiceNoList.IndexOf(row.Item(5).ToString)=-1 Then&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;UniqueInvloiceNoList.Add(row.Item(5).ToString)&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;End If &#xA;&#x9;&#x9;&#x9;&#x9;''Else&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;If UniqueInvloiceNoList.IndexOf(row.Item(2).ToString)=-1 Then&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;&#x9;UniqueInvloiceNoList.Add(row.Item(2).ToString)&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;End If &#xA;'&#x9;&#x9;&#x9;&#x9;End If &#xA;&#x9;&#x9;&#x9;&#x9;'console.WriteLine( row.Item(1).ToString)&#xA;'&#x9;&#x9;&#x9;Next row&#xA;&#xA;&#xA;&#xA;&#x9;'Do&#x9;&#x9;&#x9;''For Part-1 of Output Excel File&#xA;&#x9;''Values is being transfered to DT&#xA;&#x9;&#x9;''temp1(0) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;If (DT6.Rows(i).Item(0).ToString().Contains(&quot;00:00:00&quot;) = True)&#xA;&#x9;'&#x9;&#x9;String1 = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;&#x9;String1 = Regex.Replace(String1, &quot;/&quot;,&quot;-&quot;).Trim()&#xA;&#x9;'&#x9;&#x9;TempString1 = String1.Split({&quot; &quot;}, StringSplitOptions.None)&#xA;&#x9;&#x9;&#x9;''String1 = DateTime.FromOADate(convert.ToDouble(TempString1(0))).ToString(&quot;dd-MMM-yyyy&quot;)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-76-&quot; &amp; &quot; String1 &quot; &amp; &quot;=&quot; &amp; String1)&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-77-&quot; &amp; &quot; TempString1(0) &quot; &amp; &quot;=&quot; &amp; TempString1(0))&#xA;&#x9;&#x9;&#x9;''console.WriteLine(&quot;LN-57-&quot; &amp; &quot; String1 &quot; &amp; &quot;=&quot; &amp; String1)&#xA;&#x9;'&#x9;&#x9;TempString2 = TempString1(0).Split({&quot;-&quot;}, StringSplitOptions.None)&#xA;&#x9;'&#x9;&#x9;DocumentDate = TempString2(1).Trim() + &quot;-&quot; + TempString2(0).Trim() + &quot;-&quot; + TempString2(2).Trim()&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-81-&quot; &amp; &quot; DocumentDate- &quot; &amp; &quot;=&quot; &amp;  DocumentDate)&#xA;&#x9;'&#x9;&#x9;temp1(0) = DocumentDate&#xA;&#x9;'&#x9;Else&#xA;&#x9;'&#x9;&#x9;temp1(0) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;End If&#xA;&#x9;'&#x9;temp1(1) = DT6.Rows(i).Item(1).ToString()&#xA;&#x9;&#x9;'temp1(2) = DT6.Rows(i).Item(3).ToString()&#xA;&#x9;&#x9;'temp1(3) = DT6.Rows(i).Item(4).ToString()&#xA;&#x9;&#x9;'temp1(4) = DT6.Rows(i).Item(5).ToString()&#xA;&#x9;&#x9;'If (CDbl(DT6.Rows(i).Item(6).ToString()) &gt; 0)&#xA;&#x9;&#x9;'temp1(5) = DT6.Rows(i).Item(6).ToString()&#xA;&#x9;&#x9;'Else If (CDbl(DT6.Rows(i).Item(6).ToString()) &lt; 0)&#xA;&#x9;&#x9;'&#x9;temp1(5) = DT6.Rows(i).Item(6).ToString()&#xA;&#x9;&#x9;'Else&#xA;&#x9;&#x9;'&#x9;temp1(6) = &quot;0&quot;&#xA;&#x9;&#x9;'End If&#xA;&#x9;&#x9;&#xA;&#x9;'&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;DT10 = DT7&#xA;&#x9;&#x9;&#x9;''DT8.Merge(DT7)&#xA;&#x9;&#x9;''&#x9;&#x9;DT8.AcceptChanges()&#xA;&#x9;'&#x9;If (i = (DT6.Rows.Count-1) = True)&#xA;&#x9;'&#x9;&#x9;LoopBoolean1 = True&#xA;&#x9;'&#x9;End If &#xA;&#x9;'&#x9;i = i + 1&#xA;'&#x9;Loop While (LoopBoolean1= False)&#xA;&#x9;''console.WriteLine(&quot;LN-106-DT10.Rows.Count at IC-5 Invoice Code=&quot; + (DT10.Rows.Count).ToString())&#xA;&#x9;&#xA;" DisplayName="Preration for DT_Zoho, DT_ExtraSheet" sap:VirtualizedContainerService.HintSize="434,277" sap2010:WorkflowViewState.IdRef="InvokeCode_221">
                    <ui:InvokeCode.Arguments>
                      <InArgument x:TypeArguments="scg:List(x:String)" x:Key="TypeNameList">[TypeNameList]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DTT10">[DTT10]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DTT11">[DTT11]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Amount">[Amount]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Difference">[Difference]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction_DR">[DT_OpTransaction_DR]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction_CR">[DT_OpTransaction_CR]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction">[DT_OpTransaction]</InArgument>
                      <InOutArgument x:TypeArguments="sd:DataTable" x:Key="DT_Zoho">[DT_Zoho]</InOutArgument>
                      <OutArgument x:TypeArguments="sd:DataTable" x:Key="DT9">[DTT111]</OutArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="CreditNotAccounted">[CreditNotAccounted]</OutArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="TDSadj">[TDSadj]</OutArgument>
                      <InOutArgument x:TypeArguments="sd:DataTable" x:Key="OutPutTextFileValue">[OutPutTextFileValue]</InOutArgument>
                      <InOutArgument x:TypeArguments="sd:DataTable" x:Key="DT_ExtraSheet">[DT_ExtraSheet]</InOutArgument>
                    </ui:InvokeCode.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeCode>
                  <ui:CommentOut sap2010:Annotation.AnnotationText="Preration for TotalCrDrAmount&#xA;1st sequence upto 2.15 PM on 18-4-2024" DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,147" sap2010:WorkflowViewState.IdRef="CommentOut_328">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,315" sap2010:WorkflowViewState.IdRef="Sequence_1052">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Preration for TotalCrDrAmount&#xA;1st sequence upto 2.15 PM on 18-4-2024" Code="Try&#xA;&#x9;&#x9;''Preparation of DataRowSet4&#xA;&#xA;&#x9;&#x9;''DT_SapLedgerDump.Rows(RowIndex2).Item(0).ToString().Trim()&#xA;&#x9;&#xA;&#x9;Dim Regex  As System.Text.RegularExpressions.Regex&#xA;&#x9;Dim DT7 As New System.Data.DataTable()&#xA;&#x9;Dim DT9 As New  System.Data.DataTable()&#xA;&#x9;Dim DT8 As New  System.Data.DataTable()&#xA;&#x9;''Dim DT10 As New  System.Data.DataTable()&#xA;&#x9;Dim DT11 As New  System.Data.DataTable()&#xA;&#x9;Dim String00 As String&#xA;&#x9;Dim String01 As String&#xA;&#x9;Dim String02 As String&#xA;&#x9;Dim String03 As String&#xA;&#x9;Dim String04 As String&#xA;&#x9;Dim String05 As String&#xA;&#x9;Dim String1 As String&#xA;&#x9;Dim String2 As String&#xA;&#x9;Dim String3 As String&#xA;&#x9;Dim TempString1() As String&#xA;&#x9;Dim TempString2() As String&#xA;&#x9;Dim TempString3() As String&#xA;&#x9;Dim UtrNo As String&#xA;&#x9;''Dim Amount As String&#xA;&#x9;Dim NetCrAmount As String&#xA;&#x9;Dim NetDrAmount As String&#xA;&#x9;Dim TotalCrDrAmount As String&#xA;&#x9;Dim DocumentNo As String&#xA;&#x9;Dim AccountNo As String&#xA;&#x9;Dim DocumentDate As String&#xA;&#x9;Dim String1Boolean As Boolean&#xA;&#x9;Dim LoopBoolean1 As Boolean&#xA;&#x9;Dim LoopBoolean2 As Boolean&#xA;&#x9;&#xA;&#x9;&#x9;''Dim DT7 As New System.Data.DataTable()&#x9;&#x9;&#x9;''new System.data.DataTable&#xA;&#x9;&#x9;'DT7=DTT4.Clone&#xA;&#x9;&#x9;'DT7.Rows.Clear() &#xA;&#x9;&#x9;'Dim DT8 As New  System.Data.DataTable()&#xA;&#x9;&#x9;'DT8=DTT4.Clone&#xA;&#x9;&#x9;'DT8.Rows.Clear()&#xA;&#x9;Dim NetAmount1 As Double&#x9;&#xA;&#x9;Dim NetAmount2 As Double&#x9;&#xA;&#x9;Dim Balance1 As Double&#x9;&#xA;&#x9;Dim Balance2 As Double&#x9;&#xA;&#x9;&#xA;&#x9;Dim i As Integer&#xA;&#x9;Dim j As Integer&#xA;&#x9;Dim n As Integer&#xA;&#x9;Dim obj1(0 To 10) As Object&#xA;&#x9;&#xA;&#x9;Dim temp1(1) As Object&#xA;&#x9;Dim temp2(9) As Object&#xA;&#x9;'Balance1 = 0&#xA;&#x9;'Balance2 = 0&#xA;&#x9;''DT7=DT_InputFile.Clone&#xA;&#x9;''DT7.Rows.Clear()&#xA;''&#x9;console.WriteLine(&quot;LN-27-DT_InputFile.Rows.Count)=&quot; + (DT_InputFile.Rows.Count).ToString())&#x9;&#x9;&#x9;&#x9;'&#xA;'&#x9;&#xA;''&#x9;console.WriteLine(&quot;Preration For DTT11&quot;)  DT_Zoho&#xA;&#x9;Console.WriteLine(&quot;LN-61-DT_OpTransaction_CR.Rows.Count-&quot; + DT_OpTransaction_CR.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-62-DT_OpTransaction_DR.Rows.Count-&quot; + DT_OpTransaction_DR.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-63-DT_OpTransaction.Rows.Count-&quot; + DT_OpTransaction.Rows.Count.ToString())&#xA;&#x9;Console.WriteLine(&quot;LN-64-DT_Zoho.Rows.Count-&quot; + DT_Zoho.Rows.Count.ToString())&#xA;&#x9;i = 0 &#xA;&#x9;String1 = &quot;&quot;&#xA;&#x9;String2 = &quot;&quot;&#xA;&#x9;For Each row As DataRow In DT_Zoho.Rows&#xA;&#x9;&#x9;If (row.Item(17).ToString().ToLower().Contains(&quot;customer_name&quot;) = False) And (row.Item(12).ToString().ToLower().Contains(&quot;tds adjustment&quot;) = False) &#xA;&#x9;&#x9;&#x9;String1 = row.Item(17).ToString().ToLower()&#xA;&#x9;&#x9;&#x9;String1Boolean = True&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;If (String1Boolean = True)&#xA;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-74-String1=&quot; +String1)&#xA;&#x9;&#x9;&#x9;For Each row1 As DataRow In DT_OpTransaction.Rows&#xA;&#x9;&#x9;&#x9;&#x9;If (row1.Item(5).ToString().ToLower().Contains(String1) = True)  And (row1.Item(1).ToString().ToLower().Contains(&quot;transaction id&quot;) = False)  ''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-77-&quot; + row1.Item(1).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;String2 = row1.Item(1).ToString()&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;row.Item(1)&#x9;= VendorName&#x9;&#x9;VendorCode&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;row.Item(2)&#x9;= VendorCode&#xA;&#x9;&#x9;&#x9;&#x9;'Else&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;LN-74-&quot; + row1.Item(1).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;Next row1&#xA;&#x9;&#x9;&#x9;If (String.IsNullOrEmpty(String2) = False)&#xA;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-88-String2=&quot; +String2)&#xA;&#x9;&#x9;&#x9;&#x9;If (row.Item(14).ToString().ToLower().Contains(&quot;reference_number&quot;) = False) And (row.Item(14).ToString().ToLower().Contains(String2) = True) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'String1 = row.Item(17).ToString().ToLower()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-91-String2=&quot; +String2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If (row.Item(12).ToString().ToLower().Contains(&quot;tds adjustment&quot;) = True)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;row.Item(14) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;Else If (row.Item(14).ToString().ToLower().Contains(&quot;reference_number&quot;) = False) And (row.Item(14).ToString().ToLower().Contains(String2) = False) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;row.Item(14) = String2&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;String1Boolean = False&#xA;&#x9;&#x9;&#x9;String1 = &quot;&quot;&#xA;&#x9;&#x9;&#x9;String2 = &quot;&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;Next row&#xA;&#x9;For Each row As DataRow In DT_Zoho.Rows&#xA;&#x9;&#x9;Console.WriteLine(&quot;LN-103-&quot; + row.Item(14).ToString())&#xA;&#x9;Next row&#xA;&#x9;&#xA;'&#x9;NetAmount1 = 0&#xA;'&#x9;For i=0 To DT_OpTransaction_CR.Rows.Count-1&#xA;'&#x9;&#x9;'Console.WriteLine(&quot;LN-65-DT_OpTransaction_CR.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;If  (DT_OpTransaction_CR.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;'&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction_CR.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;'&#x9;&#x9;&#x9;NetAmount1 = NetAmount1 + Convert.ToDouble(DT_OpTransaction_CR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-69-NetAmount=&quot; + NetAmount1.ToString())&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;'&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;NetCrAmount = NetAmount1.ToString().Trim()&#xA;'&#x9;Console.WriteLine(&quot;LN-74-NetCrAmount=&quot; + NetCrAmount)&#xA;'&#x9;&#xA;'&#x9;NetAmount2 = 0&#xA;'&#x9;For i=0 To DT_OpTransaction_DR.Rows.Count-1&#xA;'&#x9;&#x9;'Console.WriteLine(&quot;LN-78-DT_OpTransaction_DR.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction_DR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;If  (DT_OpTransaction_DR.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;'&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction_CR.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;'&#x9;&#x9;&#x9;NetAmount2 = NetAmount2 + Convert.ToDouble(DT_OpTransaction_DR.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-82-NetAmount2=&quot; + NetAmount2.ToString())&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;''&#x9;NetAmount2 = Math.Round(NetAmount2,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;NetDrAmount = NetAmount2.ToString().Trim()&#xA;'&#x9;Console.WriteLine(&quot;LN-87-NetDrAmount=&quot; + NetDrAmount)&#xA;&#x9;'Balance1= NetAmount1 +  NetAmount2&#xA;''&#x9;'Balance1 = Math.Round(Balance1,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;'TotalCrDrAmount = Balance1.ToString().Trim()&#xA;'&#x9;&#xA;'&#x9;Balance1 = 0&#xA;'&#x9;For i=0 To DT_OpTransaction.Rows.Count-1&#xA;'&#x9;&#x9;'Console.WriteLine(&quot;LN-95-DT_OpTransaction.Rows(i).Item(0).ToString() value=&quot; + DT_OpTransaction.Rows(i).Item(7).ToString())&#xA;''&#x9;&#x9;If  (DT_OpTransaction.Rows(i).Item(0).ToString().ToLower().Contains(&quot;no.&quot;) = False)&#x9; 'And&#xA;''&#x9;&#x9;'If&#x9;&#x9;(DT_OpTransaction.Rows(i).Item(6).ToString().ToLower().Contains(&quot;cr&quot;) = True)&#xA;'&#x9;&#x9;&#x9;Balance1 = Balance1 + Convert.ToDouble(DT_OpTransaction.Rows(i).Item(7).ToString())&#xA;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-99-Balance1=&quot; + Balance1.ToString())&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;'&#x9;Balance1 = Math.Round(Balance1,2,MidpointRounding.AwayFromZero)&#xA;'&#x9;TotalCrDrAmount = Balance1.ToString().Trim()&#xA;'&#x9;Console.WriteLine(&quot;LN-104-TotalCrDrAmount=&quot; + TotalCrDrAmount)&#xA;'&#x9;Console.WriteLine(&quot;LN-105-TotalCrDrAmount=&quot; + TotalCrDrAmount)&#xA;'&#x9;&#xA;&#x9;&#xA;'&#x9;Console.WriteLine(&quot;LN-53-DTT10.Rows.Count-&quot; + DTT10.Rows.Count.ToString())&#xA;'&#x9;Console.WriteLine(&quot;LN-54-DTT11.Rows.Count-&quot; + DTT11.Rows.Count.ToString())&#xA;'&#x9;''Console.WriteLine(&quot;LN-55-&quot; + RecoWorkingString)&#xA;'&#x9;Console.WriteLine(&quot;LN-9=56-CurrentExcelSheetName-&quot; + CurrentExcelSheetName)&#xA;'&#x9;Console.WriteLine(&quot;LN-57-DT_Reco.Rows.Count-&quot; + DT_Reco.Rows.Count.ToString())&#xA;'&#x9;For Each row As DataRow In DT_Reco.Rows&#xA;&#x9;&#x9;'If (row.Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (row.Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True)  ''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#xA;&#x9;&#x9;'&#x9;row.Item(1)&#x9;= VendorName&#x9;&#x9;VendorCode&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'&#x9;row.Item(2)&#x9;= VendorCode&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;LN-62-&quot; )&#xA;&#x9;&#x9;'End If&#xA;&#x9;&#x9;'====&#xA;&#x9;&#x9;&#x9;'&#x9; NetAmount1 = 0&#xA;&#x9;&#x9;'&#x9;If (DTT10.Rows(i).item(0).ToString().ToLower().Contains(&quot;closing balance&quot;) = False)&#x9;&#xA;&#x9;&#x9;'&#x9;If ( (DTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;&#x9;'&#x9;NetAmount1 = Convert.ToDouble(DTT10.Rows(i).Item(1).ToString()) +  Convert.ToDouble(DTT10.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;'&#x9;Else&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount1 = NetAmount1&#xA;&#x9;&#x9;'&#x9;&#x9;End If&#xA;&#x9;&#x9;'&#x9;End If &#xA;&#x9;&#x9;'&#x9;&#x9;Next i&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;NetAmount = NetAmount1.ToString()&#xA;&#x9;&#x9;&#x9;'====&#xA;'&#x9;Next row&#xA;&#x9;&#xA;&#x9;&#xA;'&#x9;For i=0 To DT_Reco.Rows.Count-1&#xA;'&#x9;&#x9;If  (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;private&quot;) = True)&#x9; And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;v/s&quot;) = True)&#xA;'&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= VendorName&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;If  (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor code&quot;) = True)&#x9;'' &#x9; And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#xA;'&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= VendorCode&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;If ((DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True)  And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;'And&#xA;'&#x9;&#x9;&#x9;''(DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#x9;&#x9;V/s&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-83-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'Balance1 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;&#x9;n = i&#xA;'&#x9;&#x9;End If&#xA;''&#x9;&#x9;'Balance1 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;If ((DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;balance&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True)   And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Threpsi Ledger&quot;) = True ) )&#x9;''Vendor Ledger&#xA;'&#x9;&#x9;&#x9;'And&#xA;&#x9;&#x9;&#x9;''(DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#x9;&#x9;V/s&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-96-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'Balance2 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;&#x9;n = i&#xA;'&#x9;&#x9;End If&#xA;'&#x9;&#x9;'Balance2 = Convert.ToDouble(DTT10.Rows(j).Item(1).ToString())&#xA;'&#x9;&#x9;'If ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;net difference&quot;) = True) ) 'And &#xA;'&#x9;&#x9;&#x9;''NetAmount1 = Convert.ToDouble(DTT10.Rows(i).Item(1).ToString()) +  Convert.ToDouble(DTT10.Rows(i).Item(1).ToString())&#xA;'&#x9;&#x9;'&#x9;NetAmount1 = Balance1 + Balance2&#xA;&#x9;&#x9;'&#x9;NetAmount1 = Math.Round(NetAmount1,2,MidpointRounding.AwayFromZero)&#xA;&#x9;&#x9;'&#x9;NetAmount = NetAmount1.ToString()&#xA;&#x9;&#x9;'&#x9;DT_Reco.Rows(i).Item(1)&#x9;= NetAmount&#xA;&#x9;&#x9;'End If&#xA;'&#x9;&#x9;If ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;round off&quot;) = True) And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Round Off&#xA;'&#x9;&#x9;&#x9;For j=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(0).ToString().ToLower.Contains(&quot;round off&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(j).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= DTT10.Rows(j).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(2)&#x9;= DTT10.Rows(j).Item(2).ToString()&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-107-&quot; )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(i).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;Next j&#xA;'&#x9;&#x9;End If&#xA;'&#x9;Next i&#xA;'&#x9;Console.WriteLine(&quot;LN-112-&quot;  + n.ToString())&#xA;'&#x9;For i=n To DT_Reco.Rows.Count-1&#xA;&#x9;'&#x9;If ( ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor code&quot;) = False) And&#xA;&#x9;&#x9;'&#x9;(DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;reconciliation&quot;) = False) ) And (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True) ) &#xA;'&#x9;&#x9;If  ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#x9; (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True)  And &#xA;'&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Vendor Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;'' (DT_Reco.Rows(i).Item(0).ToString().Length()&gt;0 = True) )&#x9;''(DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;vendor&quot;) = True) And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;''And (CurrentExcelSheetName.ToLower().Contains(&quot;threpsi&quot;) = True)&#x9;&#x9;Threpsi Ledger&#xA;'&#x9;&#x9;&#x9;''For j= i +1 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;j = i +1&#xA;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-122-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;Do&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;invoice&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-125-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;invoice&quot;)= True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-130-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;returns&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;returns&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-139-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;payment&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;payment&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-148-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;credit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;credit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-157-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;''&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;debit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;debit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-161-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If (DT_Reco.Rows(j).Item(0).ToString().Length() = 0 = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;LoopBoolean1 = True&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;'&#x9;&#x9;&#x9;Loop While (LoopBoolean1 = False)&#xA;'&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;If  ( (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;threpsi&quot;) = True) And&#x9; (DT_Reco.Rows(i).Item(0).ToString().ToLower().Contains(&quot;:-&quot;) = True)  And&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;( (CurrentExcelSheetName = &quot;Threpsi Ledger&quot;) = True ) )&#x9;&#xA;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-179-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;j = i +1&#xA;''&#x9;&#x9;&#x9;Do&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;invoice&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-183-j=&quot; + i.ToString() + &quot;; &quot; + DT_Reco.Rows(j).Item(0).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;invoice&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-188-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;returns&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;returns&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-197-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;payment&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;payment&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-206-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;''&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;credit note&quot;) = True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;credit note&quot;)= True) )&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-215-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;discount&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;discount&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-224-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;debit note&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;debit note&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-234-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;others&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;others&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;''&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-242-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If ((DT_Reco.Rows(j).Item(0).ToString().ToLower().Contains(&quot;contra&quot;) = True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;For k=0 To  DTT10.Rows.Count-1&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(0).ToString().ToLower.Contains(&quot;contra&quot;)= True) )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTT10.Rows(k).Item(1).ToString().Length &gt; 0 ) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= DTT10.Rows(k).Item(1).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(2)&#x9;= DTT10.Rows(k).Item(2).ToString()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-251-&quot; )&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DT_Reco.Rows(j).Item(1)&#x9;= &quot;0&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Next k&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;If (DT_Reco.Rows(j).Item(0).ToString().Length() = 0 = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;LoopBoolean2 = True&#xA;'&#x9;&#x9;&#x9;&#x9;End If&#xA;'&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;'&#x9;&#x9;&#x9;Loop While (LoopBoolean2 = False)&#xA;'&#x9;&#x9;End If&#x9;&#xA;'&#x9;Next i&#xA;'&#x9;Console.WriteLine(&quot;LN-262-&quot; )&#xA;'&#x9;&#xA;'&#x9;DT10 = DT_Reco&#xA;Catch ex As Exception&#xA;&#x9;&#x9;Console.WriteLine(&quot;Error    &quot;+ ex.ToString())&#xA;&#x9;&#x9;''Dim DT10 As New  System.Data.DataTable()&#xA;&#x9;&#x9;DT10 = New System.Data.DataTable()&#xA;&#x9;&#x9;Console.WriteLine(&quot;Error in prepration of DTT15&quot;)&#xA;End Try&#xA;&#x9;&#xA;&#x9;'====&#xA;&#x9;'&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-128 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-133 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(1).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If (x.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x.ToLower.Contains(&quot;closing balance&quot;)= False) )&#x9;&#xA;&#x9;'&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''===&#x9;&#xA;&#x9;'For i=0 To DT10.Rows.Count-1&#xA;&#x9;'&#x9;console.WriteLine(&quot;LN-87 - DTT10.Rows.Count (in All amt addition invoke code)&quot; &amp; &quot;=&quot; &amp;  DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'Next i&#xA;'&#x9;&#xA;&#x9;'For i=0 To  DT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(0).ToString()-&quot; + DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(1).ToString()-&quot; + DTT10.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;'&#x9;&#x9;Next i&#xA;&#x9;'For Each x In TypeNameList&#x9;&#x9;&#x9;'''TypeNameList&#x9;&#x9;&#x9;'' Document Type&#xA;&#x9;'&#x9;'Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;If (x.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x.ToLower.Contains(&quot;closing balance&quot;)= False) )&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;DTT10.Rows(i).Item(0).ToString()-&quot; + DTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;Next i&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;5th time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = &quot;Derived Closing Balance&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;If ( (Amount.Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = Amount&#xA;&#x9;'&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;&#x9;For i=0 To  DTTT10.Rows.Count-1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (x = DTTT10.Rows(i).Item(0).ToString() ) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-128 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(0).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;temp1(0) = x&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;LN-133 - DTTT10.Rows(i).Item(0).ToString()-&quot; + DTTT10.Rows(i).Item(1).ToString())&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;Next i&#xA;&#x9;'&#x9;&#x9;&#x9;Console.WriteLine(&quot;Difference-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;temp1(0) = &quot;Difference&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;If ( (Difference.Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = Difference&#xA;&#x9;'&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;&#x9;End If&#xA;&#x9;'&#x9;End If&#xA;&#x9;'Next x&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''x =0&#xA;&#x9;&#xA;&#x9;'For Each x1 In TypeNameList&#x9;&#x9;&#x9;&#xA;&#x9;'&#x9;If (x1.ToLower.Contains(&quot;type&quot;) = False)&#xA;&#x9;'&#x9;&#x9;If ( (x1.ToLower.Contains(&quot;closing balance&quot;)= True) )&#xA;&#x9;'&#x9;&#x9;&#x9;'Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(0) = x1&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;If ( (DTTT10.Rows(i).Item(1).ToString().Length &gt; 0) = True) &#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = DTTT10.Rows(i).Item(1)&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;temp1(1) = &quot;0&quot;&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;End If&#xA;&#x9;'&#x9;&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;&#x9;DT10 = DT7&#xA;&#x9;'&#x9;End If&#xA;&#x9;'Next x1&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;'&#x9;For i=0 To TypeNameList.Count-1&#xA;'&#x9;''&#x9;If TypeNameList.IndexOf(&quot;Type&quot;)=-1 Then&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + TypeNameList.Item(i).ToString)&#xA;&#x9;''&#x9;End If&#xA;'&#x9;Next i&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;'&#x9;For Each x In TypeNameList&#x9;&#x9;&#x9;'''TypeNameList&#x9;&#x9;&#x9;'' Document Type&#xA;&#x9;&#x9;''Console.WriteLine(&quot;3nd time_Sheet Name-&quot; + x)&#xA;&#x9;&#x9;&#xA;'&#x9;Next x&#xA;'&#x9;&#xA;&#x9;&#xA;'&#x9;For i=0 To TypeNameList.Count-1&#xA;&#x9;''&#x9;If TypeNameList.IndexOf(&quot;Type&quot;)=-1 Then&#xA;&#x9;&#x9;'&#x9;Console.WriteLine(&quot;4th time_Sheet Name-&quot; + TypeNameList.Item(i).ToString)&#xA;&#x9;''&#x9;End If&#xA;'&#x9;Next i&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;&#xA;'&#x9;&#x9;If ( (DTT7.Rows(i).Item(6).ToString().Length &gt; 0) = True) &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Amount1 = Amount1 +  Convert.ToDouble(DTT7.Rows(i).Item(6).ToString())&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;'&#x9;&#x9;For Each row As DataRow In DT10.Rows&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;If ( (x = DTT10.Rows(i).Item(0).ToString()) = True) &#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;&#x9;temp1(1) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;'&#x9;&#x9;Next row&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;For Each row As DataRow In DT_InputFile.Rows&#xA;'&#x9;&#x9;&#x9;&#x9;If (row.Item(0).ToString()&#x9;= &quot;Date&quot;) = False&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;If UniqueInvloiceNoList.IndexOf(row.Item(5).ToString)=-1 Then&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;UniqueInvloiceNoList.Add(row.Item(5).ToString)&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;End If &#xA;&#x9;&#x9;&#x9;&#x9;''Else&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;If UniqueInvloiceNoList.IndexOf(row.Item(2).ToString)=-1 Then&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;&#x9;UniqueInvloiceNoList.Add(row.Item(2).ToString)&#xA;&#x9;&#x9;&#x9;&#x9;''&#x9;End If &#xA;'&#x9;&#x9;&#x9;&#x9;End If &#xA;&#x9;&#x9;&#x9;&#x9;'console.WriteLine( row.Item(1).ToString)&#xA;'&#x9;&#x9;&#x9;Next row&#xA;&#xA;&#xA;&#xA;&#x9;'Do&#x9;&#x9;&#x9;''For Part-1 of Output Excel File&#xA;&#x9;''Values is being transfered to DT&#xA;&#x9;&#x9;''temp1(0) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;If (DT6.Rows(i).Item(0).ToString().Contains(&quot;00:00:00&quot;) = True)&#xA;&#x9;'&#x9;&#x9;String1 = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;&#x9;String1 = Regex.Replace(String1, &quot;/&quot;,&quot;-&quot;).Trim()&#xA;&#x9;'&#x9;&#x9;TempString1 = String1.Split({&quot; &quot;}, StringSplitOptions.None)&#xA;&#x9;&#x9;&#x9;''String1 = DateTime.FromOADate(convert.ToDouble(TempString1(0))).ToString(&quot;dd-MMM-yyyy&quot;)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-76-&quot; &amp; &quot; String1 &quot; &amp; &quot;=&quot; &amp; String1)&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-77-&quot; &amp; &quot; TempString1(0) &quot; &amp; &quot;=&quot; &amp; TempString1(0))&#xA;&#x9;&#x9;&#x9;''console.WriteLine(&quot;LN-57-&quot; &amp; &quot; String1 &quot; &amp; &quot;=&quot; &amp; String1)&#xA;&#x9;'&#x9;&#x9;TempString2 = TempString1(0).Split({&quot;-&quot;}, StringSplitOptions.None)&#xA;&#x9;'&#x9;&#x9;DocumentDate = TempString2(1).Trim() + &quot;-&quot; + TempString2(0).Trim() + &quot;-&quot; + TempString2(2).Trim()&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;LN-81-&quot; &amp; &quot; DocumentDate- &quot; &amp; &quot;=&quot; &amp;  DocumentDate)&#xA;&#x9;'&#x9;&#x9;temp1(0) = DocumentDate&#xA;&#x9;'&#x9;Else&#xA;&#x9;'&#x9;&#x9;temp1(0) = DT6.Rows(i).Item(0).ToString()&#xA;&#x9;'&#x9;End If&#xA;&#x9;'&#x9;temp1(1) = DT6.Rows(i).Item(1).ToString()&#xA;&#x9;&#x9;'temp1(2) = DT6.Rows(i).Item(3).ToString()&#xA;&#x9;&#x9;'temp1(3) = DT6.Rows(i).Item(4).ToString()&#xA;&#x9;&#x9;'temp1(4) = DT6.Rows(i).Item(5).ToString()&#xA;&#x9;&#x9;'If (CDbl(DT6.Rows(i).Item(6).ToString()) &gt; 0)&#xA;&#x9;&#x9;'temp1(5) = DT6.Rows(i).Item(6).ToString()&#xA;&#x9;&#x9;'Else If (CDbl(DT6.Rows(i).Item(6).ToString()) &lt; 0)&#xA;&#x9;&#x9;'&#x9;temp1(5) = DT6.Rows(i).Item(6).ToString()&#xA;&#x9;&#x9;'Else&#xA;&#x9;&#x9;'&#x9;temp1(6) = &quot;0&quot;&#xA;&#x9;&#x9;'End If&#xA;&#x9;&#x9;&#xA;&#x9;'&#x9;DT7.Rows.add(temp1)&#xA;&#x9;'&#x9;DT10 = DT7&#xA;&#x9;&#x9;&#x9;''DT8.Merge(DT7)&#xA;&#x9;&#x9;''&#x9;&#x9;DT8.AcceptChanges()&#xA;&#x9;'&#x9;If (i = (DT6.Rows.Count-1) = True)&#xA;&#x9;'&#x9;&#x9;LoopBoolean1 = True&#xA;&#x9;'&#x9;End If &#xA;&#x9;'&#x9;i = i + 1&#xA;'&#x9;Loop While (LoopBoolean1= False)&#xA;&#x9;''console.WriteLine(&quot;LN-106-DT10.Rows.Count at IC-5 Invoice Code=&quot; + (DT10.Rows.Count).ToString())&#xA;&#x9;&#xA;" DisplayName="Invoke code-Preration for TotalCrDrAmount" sap:VirtualizedContainerService.HintSize="354,230" sap2010:WorkflowViewState.IdRef="InvokeCode_222">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="scg:List(x:String)" x:Key="TypeNameList">[TypeNameList]</InArgument>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="DTT10">[DTT10]</InArgument>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="DTT11">[DTT11]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Amount">[Amount]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Difference">[Difference]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key=" RecoWorkingString">[RecoWorkingString]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="VendorName">[VendorName]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="VendorCode">[VendorCode]</InArgument>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_Reco">[DT_Reco]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="CurrentExcelSheetName">[CurrentExcelSheetName]</InArgument>
                            <OutArgument x:TypeArguments="sd:DataTable" x:Key="DT10">[DTT15]</OutArgument>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction_DR">[DT_OpTransaction_DR]</InArgument>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction_CR">[DT_OpTransaction_CR]</InArgument>
                            <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTransaction">[DT_OpTransaction]</InArgument>
                            <InOutArgument x:TypeArguments="sd:DataTable" x:Key="DT_Zoho">[DT_Zoho]</InOutArgument>
                          </ui:InvokeCode.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeCode>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                </Sequence>
                <Sequence sap:VirtualizedContainerService.HintSize="688,1385" sap2010:WorkflowViewState.IdRef="Sequence_1069">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:WriteRange StartingCell="{x:Null}" AddHeaders="False" sap2010:Annotation.AnnotationText="" DataTable="[DT_Zoho]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="530,187" sap2010:WorkflowViewState.IdRef="WriteRange_73" SheetName="Zoho" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="530,92" sap2010:WorkflowViewState.IdRef="CommentOut_334">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="496,377" sap2010:WorkflowViewState.IdRef="Sequence_1079">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_338">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Object">[OutPutTextFileValue.Rows(3).Item(2)]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Object">[CreditNotAccounted]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:WriteRange AddHeaders="True" sap2010:Annotation.AnnotationText="ColumnValue = 1 here" DataTable="[OutPutTextFileValue]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="434,170" sap2010:WorkflowViewState.IdRef="WriteRange_76" SheetName="Reco" StartingCell="[&quot;A&quot; + ColumnValue.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:WriteRange>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[DT_OpTransaction_CR]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="530,621" sap2010:WorkflowViewState.IdRef="ForEachRow_37">
                    <ui:ForEachRow.Body>
                      <ActivityAction x:TypeArguments="sd:DataRow">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow2" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="496,417" sap2010:WorkflowViewState.IdRef="Sequence_1070">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign sap:VirtualizedContainerService.HintSize="434,123" sap2010:WorkflowViewState.IdRef="Assign_335">
                            <Assign.To>
                              <OutArgument x:TypeArguments="s:String[]">[DataRowSet2]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="s:String[]" xml:space="preserve">[{CurrentRow2.Item(0).ToString(), CurrentRow2.Item(1).ToString(),CurrentRow2.Item(2).ToString(),
CurrentRow2.Item(3).ToString(), CurrentRow2.Item(7).ToString()}]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[DataRowSet2]" DataTable="[DTT9]" DisplayName="Add Data Row (For Part-1 Excel Process)" sap:VirtualizedContainerService.HintSize="434,209" sap2010:WorkflowViewState.IdRef="AddDataRow_96">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:AddDataRow>
                        </Sequence>
                      </ActivityAction>
                    </ui:ForEachRow.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:ForEachRow>
                  <ui:WriteRange AddHeaders="True" sap2010:Annotation.AnnotationText="ColumnValue = 1 here" DataTable="[DTT9]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="530,187" sap2010:WorkflowViewState.IdRef="WriteRange_74" SheetName="Reco" StartingCell="[&quot;G&quot;  + ColumnValue.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                  <ui:WriteRange AddHeaders="True" sap2010:Annotation.AnnotationText="ColumnValue = 1 here" DataTable="[OutPutTextFileValue]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="530,170" sap2010:WorkflowViewState.IdRef="WriteRange_79" SheetName="Reco" StartingCell="[&quot;A&quot; + ColumnValue.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                </Sequence>
                <Sequence DisplayName="Sequence-DataRowSet3 &amp; DTT10" sap:VirtualizedContainerService.HintSize="688,768" sap2010:WorkflowViewState.IdRef="Sequence_1071">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_336">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:String[]">[DataRowSet3]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:String[]">[{CreditNotAccounted}]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[DataRowSet3]" DataTable="[DTT10]" DisplayName="Add Data Row (For Part-1 Excel Process)" sap:VirtualizedContainerService.HintSize="434,226" sap2010:WorkflowViewState.IdRef="AddDataRow_97">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:AddDataRow>
                  <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_337">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[ColumnValue]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[ColumnValue + DTT9.Rows.Count + 1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:WriteRange AddHeaders="False" sap2010:Annotation.AnnotationText="" DataTable="[DTT10]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="434,170" sap2010:WorkflowViewState.IdRef="WriteRange_75" SheetName="Reco" StartingCell="[&quot;K&quot; + ColumnValue.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                </Sequence>
                <Sequence sap:VirtualizedContainerService.HintSize="688,851" sap2010:WorkflowViewState.IdRef="Sequence_1081">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="388,130" sap2010:WorkflowViewState.IdRef="WriteLine_471" Text="[&quot;11.29-&quot; +  &quot;TotalCrDrAmount =&quot; + TotalCrDrAmount + Environment.NewLine + &#xA;  &quot;NetDrAmount =&quot; + NetDrAmount + Environment.NewLine + &#xA;  &quot;CreditNotAccounted =&quot; + CreditNotAccounted + Environment.NewLine +&#xA;  &quot;TDSadj =&quot; + TDSadj + Environment.NewLine]" />
                  <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Tds calculation" Code="Try&#xA;&#xA;&#x9;Dim Regex  As System.Text.RegularExpressions.Regex&#xA;&#x9;Dim String1 As String&#xA;&#x9;Dim String2 As String&#xA;&#x9;Dim String3 As String&#xA;&#x9;Dim String4 As String&#xA;&#x9;Dim String5 As String&#xA;&#x9;Dim String6 As String&#xA;&#x9;Dim String7 As String&#xA;&#x9;Dim String8 As String&#xA;&#x9;&#xA;&#x9;Dim TempString1() As String&#xA;&#x9;&#xA;&#x9;Dim i As Integer&#xA;&#x9;Dim RealPageNo As Integer&#xA;&#x9;Dim UtrNoLength As Integer&#xA;&#x9;Dim j As Integer&#xA;&#x9;Dim k As Integer&#xA;&#x9;Dim n As Integer&#xA;&#x9;Dim LoopBoolean As Boolean&#xA;&#x9;Dim LoopBoolean1 As Boolean  &#xA;&#x9;Dim LoopBoolean2 As Boolean &#xA;&#x9;Dim LoopBoolean3 As Boolean&#xA;&#x9;Dim LoopBoolean4 As Boolean&#xA;&#x9;&#xA;&#x9;Dim NetAmount1 As Double&#x9;&#xA;&#x9;Dim NetAmount2 As Double&#xA;&#x9;&#xA;&#x9;Dim temp1(0) As Object  'For DT data table&#xA;&#x9;Dim temp2(0) As Object  'For DT2 data table&#xA;&#x9;Dim DT As New System.Data.DataTable()&#xA;&#x9;'Dim DT1 As New System.Data.DataTable()&#xA;&#x9;Dim DT2 As New System.data.DataTable&#xA;&#x9;Dim DT3 As New System.data.DataTable&#xA;&#x9;'Dim DT_TDS As New System.data.DataTable&#xA;&#x9;'Header Names fo internal DT&#xA;&#x9;&#x9;DT.Columns.Add(&quot;TDS Amount (INR)&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;'Header Names fo internal DT&#xA;&#x9;&#x9;DT2.Columns.Add(&quot;TDS Amount (INR)&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;console.WriteLine(&quot;LN-1208-##-TotalCrDrAmount &quot; &amp; &quot;=&quot; &amp; TotalCrDrAmount)&#xA;&#x9;console.WriteLine(&quot;LN-1208-##-NetDrAmount &quot; &amp; &quot;=&quot; &amp; NetDrAmount)&#xA;&#x9;console.WriteLine(&quot;LN-1208-##-CreditNotAccounted &quot; &amp; &quot;=&quot; &amp; CreditNotAccounted)&#xA;&#x9;console.WriteLine(&quot;LN-1208-##-TDSadj &quot; &amp; &quot;=&quot; &amp; TDSadj)&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;For i=0 To DT_OpTrns.Rows.Count-1&#xA;&#x9;&#x9;LoopBoolean1 = False&#xA;&#x9;&#x9;For j=0 To DT_Zoho.Rows.Count-1&#xA;&#x9;&#x9;&#x9;If DT_OpTrns.Rows(i).Item(1).ToString()  = DT_Zoho.Rows(j).Item(14).ToString() And DT_Zoho.Rows(j).Item(14).ToString().Trim() &lt;&gt; &quot;&quot; Then 'And&#xA;&#x9;&#x9;&#x9;&#x9;LoopBoolean1 = True&#xA;&#x9;&#x9;&#x9;&#x9;'(DT_Zoho.Rows.Item(14).ToString().ToLower().Contains(&quot;reference_number&quot;) = False)&#xA;&#x9;&#x9;&#x9;&#x9;'DT7.Rows.Remove(DT_OpTransaction_CR.Rows(i))&#xA;&#x9;&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-135-DT_OpTrns.Rows(i).Item(1).ToString()&quot; + DT_OpTrns.Rows(i).Item(1).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;'Console.WriteLine(&quot;LN-136-i-&quot; + i.ToString())&#xA;&#x9;&#x9;&#x9;&#x9;NetAmount1 = 0&#xA;&#x9;&#x9;&#x9;&#x9;NetAmount1 = Double.Parse(DT_OpTrns.Rows(i).Item(7).ToString()) - Double.Parse(DT_Zoho.Rows(j).Item(15).ToString())&#xA;&#x9;&#x9;&#x9;&#x9;NetAmount1 = Math.Round(NetAmount1, 2, MidpointRounding.AwayFromZero)&#xA;&#x9;&#x9;&#x9;&#x9;'temp1(0) = NetAmount1.ToString().Trim()&#xA;&#x9;&#x9;&#x9;&#x9;DT.Rows.add(NetAmount1.ToString().Trim())&#xA;&#x9;&#x9;&#x9;&#x9;'DT1.Merge(DT)&#xA;&#x9;&#x9;&#x9;&#x9;'DT.AcceptChanges()&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;Next j&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If LoopBoolean1 = False And i &gt; 0 Then&#xA;&#x9;&#x9;&#x9;DT.Rows.add(&quot;0&quot;)&#xA;&#x9;&#x9;End If&#xA;&#x9;Next i &#xA;&#x9;DT1 = DT&#xA;&#x9;Console.WriteLine(&quot;LN-71-DT1.Rows.Count-&quot; + DT1.Rows.Count.ToString())&#xA;&#x9;&#xA;&#x9;DT3 = DT1&#xA;&#x9;For i=0 To DT3.Rows.Count-1&#xA;&#x9;&#x9;'If (DT3.Rows(i).Item(0).ToString()) &lt;&gt;&quot;0&quot; And i &gt; 0 Then&#xA;&#x9;&#x9;'If String.IsNullOrEmpty(DT3.Rows(i).Item(0).ToString()) = True And i &gt; 0 Then&#xA;&#x9;&#x9;If (DT3.Rows(i).Item(0).ToString()) &lt;&gt;&quot;0&quot; And  (DT3.Rows(i).Item(0).ToString()) &lt;&gt;&quot;-1&quot; Then&#xA;&#x9;&#x9;&#x9;temp2(0) = DT3.Rows(i).Item(0).ToString()&#xA;&#x9;&#x9;&#x9;DT2.Rows.add(temp2)&#xA;&#x9;&#x9;End If&#xA;&#x9;Next i&#xA;&#x9;&#xA;&#x9;DT_TDS = DT2&#xA;&#x9;Console.WriteLine(&quot;LN-82-DT_TDS.Rows.Count-&quot; + DT_TDS.Rows.Count.ToString())&#xA;&#x9;NetAmount2 = 0&#xA;&#x9;For i=0 To DT_TDS.Rows.Count-1&#xA;&#x9;&#x9;Console.WriteLine(&quot;LN-84-DT_TDS.Rows(i).Item(0).ToString()&quot; + DT_TDS.Rows(i).Item(0).ToString())&#xA;&#x9;&#x9;NetAmount2 = NetAmount2 + Double.Parse(DT_TDS.Rows(i).Item(0).ToString())&#xA;&#x9;Next i&#xA;&#x9;NetAmount2 = Math.Round(NetAmount2, 2, MidpointRounding.AwayFromZero)&#xA;&#x9;RecoTdsAmt = NetAmount2.ToString().Trim()&#xA;&#x9;Console.WriteLine(&quot;LN-95-RecoTdsAmt-&quot; + RecoTdsAmt)&#xA;&#x9;&#xA;&#x9;OutPutTextFileValue.Rows(3).Item(2) = NetAmount2&#xA;&#x9;'OutPutTextFileValue.Rows(2).Item(2) = Double.Parse(CreditNotAccounted)&#xA;&#x9;&#xA;&#x9;If (RecoTdsAmt.Contains(&quot;-&quot;))&#xA;&#x9;&#x9;TempString1 =  RecoTdsAmt.Split({&quot;-&quot;}, StringSplitOptions.None)&#xA;&#x9;&#x9; RecoC5Value = TempString1(1).Trim()&#xA;&#x9;Else&#xA;&#x9;&#x9; RecoC5Value = RecoTdsAmt.Trim()&#xA;&#x9; End If&#xA;&#x9;Console.WriteLine(&quot;LN-106-RecoC5Value-&quot; + RecoC5Value)&#xA;&#x9;&#xA;&#x9;Catch ex As Exception&#xA;&#x9;&#x9;Console.WriteLine(&quot;Error    &quot;+ ex.ToString())&#xA;&#x9;&#x9;&#xA;End Try&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;&#xA;&#x9;''Values is being transfered to DT&#xA;&#x9;'&#x9;&#x9;temp1(0)   = InvoiceNumber&#x9;&#x9;&#xA;&#x9;'&#x9;&#x9;temp1(1)   = DocNo&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;'&#x9;&#x9;temp1(2)   = DocAmt&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;'&#x9;&#x9;temp1(3)   = PaymentAmount&#x9;&#x9;&#xA;&#x9;'&#x9;&#x9;temp1(4)   = DocDate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;''&#x9;&#x9;temp1(5)   = InvDocDate&#x9;&#x9;&#x9;&#x9;'&#xA;&#x9;'&#x9;&#x9;temp1(6)   = TDS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;'&#x9;DT.Rows.add(temp1)&#xA;&#x9;'&#x9;DT.AcceptChanges()&#x9;&#x9;&#xA;&#x9;'DT_TDS = DT&#x9;&#xA;&#xA;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="388,236" sap2010:WorkflowViewState.IdRef="InvokeCode_225">
                    <ui:InvokeCode.Arguments>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_OpTrns">[DT_OpTransaction]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="TotalCrDrAmount">[TotalCrDrAmount]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="NetDrAmount">[NetDrAmount]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="CreditNotAccounted">[CreditNotAccounted]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="TDSadj">[TDSadj]</InArgument>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="DT_Zoho">[DT_Zoho]</InArgument>
                      <OutArgument x:TypeArguments="sd:DataTable" x:Key="DT1">[DTT15]</OutArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="RecoTdsAmt">[RecoTdsAmt]</OutArgument>
                      <OutArgument x:TypeArguments="sd:DataTable" x:Key="DT_TDS">[DT_TDS]</OutArgument>
                      <InOutArgument x:TypeArguments="sd:DataTable" x:Key="OutPutTextFileValue">[OutPutTextFileValue]</InOutArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="RecoC5Value">[RecoC5Value]</OutArgument>
                    </ui:InvokeCode.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeCode>
                  <ui:WriteRange AddHeaders="True" sap2010:Annotation.AnnotationText="" DataTable="[DTT15]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="388,187" sap2010:WorkflowViewState.IdRef="WriteRange_85" SheetName="OpTransactionHistoryUX3" StartingCell="k1" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                  <ui:WriteRange AddHeaders="True" sap2010:Annotation.AnnotationText="" DataTable="[DT_TDS]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="388,170" sap2010:WorkflowViewState.IdRef="WriteRange_87" SheetName="Reco" StartingCell="M1" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                </Sequence>
                <Sequence DisplayName="Sequence-DataRowSet10 &amp; DTT16" sap:VirtualizedContainerService.HintSize="688,768" sap2010:WorkflowViewState.IdRef="Sequence_1087">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_339">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:String[]">[DataRowSet10]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:String[]">[{RecoTdsAmt}]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[DataRowSet10]" DataTable="[DTT16]" DisplayName="Add Data Row (For Part-1 Excel Process)" sap:VirtualizedContainerService.HintSize="434,226" sap2010:WorkflowViewState.IdRef="AddDataRow_98">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:AddDataRow>
                  <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_340">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[ColumnValue]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[1 + DT_TDS.Rows.Count + 1]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:WriteRange AddHeaders="False" sap2010:Annotation.AnnotationText="" DataTable="[DTT16]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="434,170" sap2010:WorkflowViewState.IdRef="WriteRange_86" SheetName="Reco" StartingCell="[&quot;M&quot; + ColumnValue.ToString()]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                </Sequence>
                <Sequence sap2010:Annotation.AnnotationText="For Each Row in Data Table -OutPutTextFileValue Print &amp; Extra sheet Print" sap:VirtualizedContainerService.HintSize="688,1335" sap2010:WorkflowViewState.IdRef="Sequence_1095">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="For Each Row in Data Table -OutPutTextFileValue Print" DataTable="[OutPutTextFileValue]" DisplayName="For Each Row in Data Table -OutPutTextFileValue Print" sap:VirtualizedContainerService.HintSize="546,1006" sap2010:WorkflowViewState.IdRef="ForEachRow_41">
                    <ui:ForEachRow.Body>
                      <ActivityAction x:TypeArguments="sd:DataRow">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
                        </ActivityAction.Argument>
                        <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="512,771" sap2010:WorkflowViewState.IdRef="Sequence_1092">
                          <Sequence.Variables>
                            <Variable x:TypeArguments="sd:DataTable" Name="OutPutTextFileValueFiltered" />
                          </Sequence.Variables>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If Condition="[CurrentRow.Item(1).ToString &lt;&gt; &quot;RoundOff&quot;]" sap:VirtualizedContainerService.HintSize="450,686" sap2010:WorkflowViewState.IdRef="If_134">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If.Then>
                              <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,425" sap2010:WorkflowViewState.IdRef="Sequence_1093">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:FilterDataTable DataTable="[OutPutTextFileValue]" DisplayName="Filter Data Table" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="354,201" sap2010:WorkflowViewState.IdRef="FilterDataTable_43" OutputDataTable="[OutPutTextFileValueFiltered]" SelectColumnsMode="Remove">
                                  <ui:FilterDataTable.Filters>
                                    <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                                      <ui:FilterOperationArgument BooleanOperator="And" Operator="EQ">
                                        <ui:FilterOperationArgument.Column>
                                          <InArgument x:TypeArguments="x:Int32">[1]</InArgument>
                                        </ui:FilterOperationArgument.Column>
                                        <ui:FilterOperationArgument.Operand>
                                          <InArgument x:TypeArguments="x:Object">[CurrentRow.Item(1)]</InArgument>
                                        </ui:FilterOperationArgument.Operand>
                                      </ui:FilterOperationArgument>
                                    </scg:List>
                                  </ui:FilterDataTable.Filters>
                                  <ui:FilterDataTable.SelectColumns>
                                    <scg:List x:TypeArguments="InArgument" Capacity="4">
                                      <x:Null />
                                    </scg:List>
                                  </ui:FilterDataTable.SelectColumns>
                                </ui:FilterDataTable>
                                <ui:WriteRange StartingCell="{x:Null}" AddHeaders="True" DataTable="[OutPutTextFileValueFiltered]" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="354,139" sap2010:WorkflowViewState.IdRef="WriteRange_89" SheetName="[CurrentRow.Item(1).ToString]" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]" />
                              </Sequence>
                            </If.Then>
                            <If.Else>
                              <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,100" sap2010:WorkflowViewState.IdRef="Sequence_1094">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </Sequence>
                            </If.Else>
                          </If>
                        </Sequence>
                      </ActivityAction>
                    </ui:ForEachRow.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:ForEachRow>
                  <ui:WriteRange StartingCell="{x:Null}" AddHeaders="True" sap2010:Annotation.AnnotationText="" DataTable="[DT_ExtraSheet]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="546,170" sap2010:WorkflowViewState.IdRef="WriteRange_90" SheetName="Extra Sheet" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                </Sequence>
                <Sequence DisplayName="Sequence-For Reco C5 Value" sap:VirtualizedContainerService.HintSize="688,766" sap2010:WorkflowViewState.IdRef="Sequence_1096">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ClearDataTable DataTable="[DTT16]" DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="434,120" sap2010:WorkflowViewState.IdRef="ClearDataTable_138" />
                  <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_341">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:String[]">[DataRowSet10]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:String[]">[{RecoC5Value}]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:AddDataRow DataRow="{x:Null}" ArrayRow="[DataRowSet10]" DataTable="[DTT16]" DisplayName="Add Data Row (For Part-1 Excel Process)" sap:VirtualizedContainerService.HintSize="434,226" sap2010:WorkflowViewState.IdRef="AddDataRow_99">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:AddDataRow>
                  <ui:WriteRange AddHeaders="False" sap2010:Annotation.AnnotationText="" DataTable="[DTT16]" DisplayName="Write Range " sap:VirtualizedContainerService.HintSize="434,170" sap2010:WorkflowViewState.IdRef="WriteRange_91" SheetName="Reco" StartingCell="C5" WorkbookPath="[OutPutPath &amp; ProcessStringMain &amp; &quot;\&quot; &amp; LastSavedFileName]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:WriteRange>
                </Sequence>
                <Sequence DisplayName="Sequence - Clear Data Tables" sap:VirtualizedContainerService.HintSize="688,471" sap2010:WorkflowViewState.IdRef="Sequence_997">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:ClearDataTable DataTable="[DTT15]" DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="388,120" sap2010:WorkflowViewState.IdRef="ClearDataTable_116" />
                  <ui:ClearDataTable DataTable="[DTT112]" DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="388,120" sap2010:WorkflowViewState.IdRef="ClearDataTable_120" />
                  <ui:ClearDataTable DataTable="[DTT112]" DisplayName="Clear Data Table" sap:VirtualizedContainerService.HintSize="388,103" sap2010:WorkflowViewState.IdRef="ClearDataTable_121" />
                </Sequence>
                <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="688,75" sap2010:WorkflowViewState.IdRef="CommentOut_337">
                  <ui:CommentOut.Body>
                    <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,198" sap2010:WorkflowViewState.IdRef="Sequence_1098">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <WriteLine DisplayName="Write Line - 40" sap:VirtualizedContainerService.HintSize="354,113" sap2010:WorkflowViewState.IdRef="WriteLine_423" Text="[&quot;11.30-&quot; + &quot;Process Completed for &quot; &amp; ProcessStringMain &amp; &quot; Bot Process.&quot;]" />
                    </Sequence>
                  </ui:CommentOut.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:CommentOut>
              </Sequence>
            </Sequence>
          </ActivityAction>
        </ui:ForEach.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:ForEach>
      <Sequence DisplayName="55-Sequence" sap:VirtualizedContainerService.HintSize="846,560" sap2010:WorkflowViewState.IdRef="Sequence_323">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="CommentOut_338">
          <ui:CommentOut.Body>
            <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416,245" sap2010:WorkflowViewState.IdRef="Sequence_1099">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:DeleteFileX sap2010:Annotation.AnnotationText="&#xA;Delete File-Dump file which is stored in DumpExcelFile Folder" DisplayName="Delete File-Dump file which is stored in DumpExcelFile Folder" sap:VirtualizedContainerService.HintSize="354,160" sap2010:WorkflowViewState.IdRef="DeleteFileX_3" Path="[BotBasePath + &quot;InputExcelDumpFiles\&quot; +  ProcessStringMain &amp; &quot;\&quot; + ExcelDumpFileName]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:DeleteFileX>
            </Sequence>
          </ui:CommentOut.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:CommentOut>
        <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="434,130" sap2010:WorkflowViewState.IdRef="WriteLine_80" Text="[(&quot;11.31-&quot; + &quot;MailCheck Value= &quot; &amp; MailCheck  &amp;&quot; at &quot; &amp; ProcessStringMain &amp; &quot; Bot Process.&quot; )]" />
        <Assign sap:VirtualizedContainerService.HintSize="434,122" sap2010:WorkflowViewState.IdRef="Assign_69">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Boolean">[MailCheck]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
          </Assign.Value>
        </Assign>
        <Assign sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_70">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Boolean">[BotRunProcess]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
          </Assign.Value>
        </Assign>
      </Sequence>
    </Sequence>
    <If Condition="[EmailSequence = True]" DisplayName="44-If - (EmailSequence = True)" sap:VirtualizedContainerService.HintSize="908,468" sap2010:WorkflowViewState.IdRef="If_61">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="496,190" sap2010:WorkflowViewState.IdRef="Sequence_312">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="434,105" sap2010:WorkflowViewState.IdRef="Assign_66">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Boolean">[EmailSequence]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,100" sap2010:WorkflowViewState.IdRef="Sequence_313">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Else>
    </If>
    <WriteLine DisplayName="Write Line - 40" sap:VirtualizedContainerService.HintSize="908,113" sap2010:WorkflowViewState.IdRef="WriteLine_10" Text="[&quot;11.32-&quot; + &quot;Process Completed for &quot; &amp; ProcessStringMain &amp; &quot; Bot Process.&quot;]" />
  </Sequence>
</Activity>